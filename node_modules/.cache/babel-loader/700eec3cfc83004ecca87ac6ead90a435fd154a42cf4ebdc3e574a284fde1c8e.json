{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getCurrentHub } from '@sentry/core';\nimport { logger, dropUndefinedKeys } from '@sentry/utils';\nimport { Span, SpanRecorder } from './span.js';\n\n/** JSDoc */\nvar Transaction = /*#__PURE__*/function (_Span) {\n  _inherits(Transaction, _Span);\n  var _super = _createSuper(Transaction);\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Transaction(transactionContext, hub) {\n    var _this;\n    _classCallCheck(this, Transaction);\n    _this = _super.call(this, transactionContext);\n    Transaction.prototype.__init.call(_assertThisInitialized(_this));\n    Transaction.prototype.__init2.call(_assertThisInitialized(_this));\n    Transaction.prototype.__init3.call(_assertThisInitialized(_this));\n    _this._hub = hub || getCurrentHub();\n    _this._name = transactionContext.name || '';\n    _this.metadata = _objectSpread(_objectSpread({\n      source: 'custom'\n    }, transactionContext.metadata), {}, {\n      spanMetadata: {}\n    });\n    _this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    _this.transaction = _assertThisInitialized(_this);\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    var incomingDynamicSamplingContext = _this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      _this._frozenDynamicSamplingContext = _objectSpread({}, incomingDynamicSamplingContext);\n    }\n    return _this;\n  }\n\n  /** Getter for `name` property */\n  _createClass(Transaction, [{\n    key: \"__init\",\n    value:\n    /**\n     * The reference to the current hub.\n     */\n\n    function __init() {\n      this._measurements = {};\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._contexts = {};\n    }\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._frozenDynamicSamplingContext = undefined;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n\n    /** Setter for `name` property, which also sets `source` as custom */,\n    set: function set(newName) {\n      this.setName(newName);\n    }\n\n    /**\n     * JSDoc\n     */\n  }, {\n    key: \"setName\",\n    value: function setName(name) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom';\n      this._name = name;\n      this.metadata.source = source;\n    }\n\n    /**\n     * Attaches SpanRecorder to the span itself\n     * @param maxlen maximum number of spans that can be recorded\n     */\n  }, {\n    key: \"initSpanRecorder\",\n    value: function initSpanRecorder() {\n      var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n      if (!this.spanRecorder) {\n        this.spanRecorder = new SpanRecorder(maxlen);\n      }\n      this.spanRecorder.add(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, context) {\n      if (context === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this._contexts[key];\n      } else {\n        this._contexts[key] = context;\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setMeasurement\",\n    value: function setMeasurement(name, value) {\n      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      this._measurements[name] = {\n        value: value,\n        unit: unit\n      };\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setMetadata\",\n    value: function setMetadata(newMetadata) {\n      this.metadata = _objectSpread(_objectSpread({}, this.metadata), newMetadata);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"finish\",\n    value: function finish(endTimestamp) {\n      var _this2 = this;\n      // This transaction is already finished, so we should not flush it again.\n      if (this.endTimestamp !== undefined) {\n        return undefined;\n      }\n      if (!this.name) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n        this.name = '<unlabeled transaction>';\n      }\n\n      // just sets the end timestamp\n      _get(_getPrototypeOf(Transaction.prototype), \"finish\", this).call(this, endTimestamp);\n      if (this.sampled !== true) {\n        // At this point if `sampled !== true` we want to discard the transaction.\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n        var client = this._hub.getClient();\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'transaction');\n        }\n        return undefined;\n      }\n      var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) {\n        return s !== _this2 && s.endTimestamp;\n      }) : [];\n      if (this._trimEnd && finishedSpans.length > 0) {\n        this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n          if (prev.endTimestamp && current.endTimestamp) {\n            return prev.endTimestamp > current.endTimestamp ? prev : current;\n          }\n          return prev;\n        }).endTimestamp;\n      }\n      var metadata = this.metadata;\n      var transaction = _objectSpread({\n        contexts: _objectSpread(_objectSpread({}, this._contexts), {}, {\n          // We don't want to override trace context\n          trace: this.getTraceContext()\n        }),\n        spans: finishedSpans,\n        start_timestamp: this.startTimestamp,\n        tags: this.tags,\n        timestamp: this.endTimestamp,\n        transaction: this.name,\n        type: 'transaction',\n        sdkProcessingMetadata: _objectSpread(_objectSpread({}, metadata), {}, {\n          dynamicSamplingContext: this.getDynamicSamplingContext()\n        })\n      }, metadata.source && {\n        transaction_info: {\n          source: metadata.source\n        }\n      });\n      var hasMeasurements = Object.keys(this._measurements).length > 0;\n      if (hasMeasurements) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n        transaction.measurements = this._measurements;\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] Finishing \".concat(this.op, \" transaction: \").concat(this.name, \".\"));\n      return this._hub.captureEvent(transaction);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toContext\",\n    value: function toContext() {\n      var spanContext = _get(_getPrototypeOf(Transaction.prototype), \"toContext\", this).call(this);\n      return dropUndefinedKeys(_objectSpread(_objectSpread({}, spanContext), {}, {\n        name: this.name,\n        trimEnd: this._trimEnd\n      }));\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"updateWithContext\",\n    value: function updateWithContext(transactionContext) {\n      _get(_getPrototypeOf(Transaction.prototype), \"updateWithContext\", this).call(this, transactionContext);\n      this.name = transactionContext.name || '';\n      this._trimEnd = transactionContext.trimEnd;\n      return this;\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @experimental\n     */\n  }, {\n    key: \"getDynamicSamplingContext\",\n    value: function getDynamicSamplingContext() {\n      if (this._frozenDynamicSamplingContext) {\n        return this._frozenDynamicSamplingContext;\n      }\n      var hub = this._hub || getCurrentHub();\n      var client = hub && hub.getClient();\n      if (!client) return {};\n      var _ref = client.getOptions() || {},\n        environment = _ref.environment,\n        release = _ref.release;\n      var _ref2 = client.getDsn() || {},\n        public_key = _ref2.publicKey;\n      var maybeSampleRate = this.metadata.sampleRate;\n      var sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;\n      var scope = hub.getScope();\n      var _ref3 = scope && scope.getUser() || {},\n        user_segment = _ref3.segment;\n      var source = this.metadata.source;\n\n      // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n      var transaction = source && source !== 'url' ? this.name : undefined;\n      var dsc = dropUndefinedKeys({\n        environment: environment,\n        release: release,\n        transaction: transaction,\n        user_segment: user_segment,\n        public_key: public_key,\n        trace_id: this.traceId,\n        sample_rate: sample_rate\n      });\n\n      // Uncomment if we want to make DSC immutable\n      // this._frozenDynamicSamplingContext = dsc;\n\n      return dsc;\n    }\n  }]);\n  return Transaction;\n}(Span);\nexport { Transaction };","map":{"version":3,"mappings":";;;;;;;;;;;;AAiBA;AAAA,IACAA;EAAA;EAAA;EAkBA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;IAAA;IAAA;IACA;IAAAA;IAAAA;IAAAA;IAEA;IAEA;IAEA;MACAC;IAAA,GACAC;MACAC;IAAA,EACA;IAEA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;MACA;MACA;IACA;IAAA;EACA;;EAEA;EAAA;IAAA;IAAA;IAjDA;AACA;AACA;;IAKA;MAAA;IAAA;EAAA;IAAA;IAAA,OAEA;MAAA;IAAA;EAAA;IAAA;IAAA,OAIA;MAAA;IAAA;EAAA;IAAA;IAAA,KAqCA;MACA;IACA;;IAEA;IAAA,KACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MAAA;MACA;MACA;IACA;;IAEA;AACA;AACA;AACA;EAHA;IAAA;IAAA,OAIA;MAAA;MACA;QACA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;QACA;QACA;MACA;QACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MAAA;MACA;QAAAC;QAAAC;MAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MAAA;MACA;MACA;QACA;MACA;MAEA;QACA;QACA;MACA;;MAEA;MACA;MAEA;QACA;QACA;QAEA;QACA;UACAC;QACA;QAEA;MACA;MAEA;QAAA;MAAA;MAEA;QACA;UACA;YACA;UACA;UACA;QACA;MACA;MAEA;MAEA;QACAC,0CACA;UACA;UACAC;QAAA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC,uDACAC;UACAC;QAAA;MACA,GACAD;QACAE;UACAjB;QACA;MACA,EACA;MAEA;MAEA;QACA,iEACAkB,WACA,qDACAC,iDACA;QACAP;MACA;MAEA;MAEA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MAEA,yDACAQ;QACAC;QACAC;MAAA,GACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MAEA;MAEA;MAEA;IACA;;IAEA;AACA;AACA;AACA;AACA;EAJA;IAAA;IAAA,OAKA;MACA;QACA;MACA;MAEA;MACA;MAEA;MAEA;QAAAC;QAAAC;MACA;QAAAC;MAEA;MACA;MAEA;MACA;QAAAC;MAEA;;MAEA;MACA;MAEA;QACAH;QACAC;QACAZ;QACAc;QACAD;QACAE;QACAC;MACA;;MAEA;MACA;;MAEA;IACA;EAAA;EAAA;AAAA,EAjQAC","names":["Transaction","source","transactionContext","spanMetadata","value","unit","client","contexts","trace","spans","start_timestamp","tags","timestamp","transaction","type","sdkProcessingMetadata","metadata","dynamicSamplingContext","transaction_info","logger","JSON","spanContext","name","trimEnd","environment","release","public_key","user_segment","trace_id","sample_rate","SpanClass"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/transaction.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport { getCurrentHub } from '@sentry/core';\nimport type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  Event,\n  Measurements,\n  MeasurementUnit,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public metadata: TransactionMetadata;\n\n  /**\n   * The reference to the current hub.\n   */\n  public readonly _hub: Hub;\n\n  private _name: string;\n\n  private _measurements: Measurements = {};\n\n  private _contexts: Contexts = {};\n\n  private _trimEnd?: boolean;\n\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined = undefined;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this.metadata = {\n      source: 'custom',\n      ...transactionContext.metadata,\n      spanMetadata: {},\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  /** Getter for `name` property */\n  public get name(): string {\n    return this._name;\n  }\n\n  /** Setter for `name` property, which also sets `source` as custom */\n  public set name(newName: string) {\n    this.setName(newName);\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.metadata.source = source;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      __DEBUG_BUILD__ && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      __DEBUG_BUILD__ && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      const client = this._hub.getClient();\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const metadata = this.metadata;\n\n    const transaction: Event = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: this.getDynamicSamplingContext(),\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      __DEBUG_BUILD__ &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name || '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    if (this._frozenDynamicSamplingContext) {\n      return this._frozenDynamicSamplingContext;\n    }\n\n    const hub: Hub = this._hub || getCurrentHub();\n    const client = hub && hub.getClient();\n\n    if (!client) return {};\n\n    const { environment, release } = client.getOptions() || {};\n    const { publicKey: public_key } = client.getDsn() || {};\n\n    const maybeSampleRate = this.metadata.sampleRate;\n    const sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;\n\n    const scope = hub.getScope();\n    const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n    const source = this.metadata.source;\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const transaction = source && source !== 'url' ? this.name : undefined;\n\n    const dsc = dropUndefinedKeys({\n      environment,\n      release,\n      transaction,\n      user_segment,\n      public_key,\n      trace_id: this.traceId,\n      sample_rate,\n    });\n\n    // Uncomment if we want to make DSC immutable\n    // this._frozenDynamicSamplingContext = dsc;\n\n    return dsc;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}