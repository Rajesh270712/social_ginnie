{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { WINDOW } from '../helpers.js';\n\n/** HttpContext integration collects information about HTTP request headers */\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n    HttpContext.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(HttpContext, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = HttpContext.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      addGlobalEventProcessor(function (event) {\n        if (getCurrentHub().getIntegration(HttpContext)) {\n          // if none of the information we want exists, don't bother\n          if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n            return event;\n          }\n\n          // grab as much info as exists and add it to the event\n          var url = event.request && event.request.url || WINDOW.location && WINDOW.location.href;\n          var _ref = WINDOW.document || {},\n            referrer = _ref.referrer;\n          var _ref2 = WINDOW.navigator || {},\n            userAgent = _ref2.userAgent;\n          var headers = _objectSpread(_objectSpread(_objectSpread({}, event.request && event.request.headers), referrer && {\n            Referer: referrer\n          }), userAgent && {\n            'User-Agent': userAgent\n          });\n          var request = _objectSpread(_objectSpread(_objectSpread({}, event.request), url && {\n            url: url\n          }), {}, {\n            headers: headers\n          });\n          return _objectSpread(_objectSpread({}, event), {}, {\n            request: request\n          });\n        }\n        return event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'HttpContext';\n    }\n  }]);\n  return HttpContext;\n}();\nHttpContext.__initStatic();\nexport { HttpContext };","map":{"version":3,"mappings":";;;;;;AAKA;AAAA,IACAA;EAAA;IAAA;IAAAA;EAAA;EACA;AACA;AACA;EAFA;IAAA;IAAA;IAKA;AACA;AACA;IACA;MAAA;IAAA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACAC;QACA;UACA;UACA;YACA;UACA;;UAEA;UACA;UACA;YAAAC;UACA;YAAAC;UAEA,4DACAC,yCACAF;YAAAG;UAAA,IACAF;YAAA;UAAA,EACA;UACA;YAAAG;UAAA;YAAAC;UAAA;UAEA;YAAAC;UAAA;QACA;QACA;MACA;IACA;EAAA;IAAA;IAAA,OAlCA;MAAA;IAAA;EAAA;EAAA;AAAA;AAmCAR","names":["HttpContext","addGlobalEventProcessor","referrer","userAgent","event","Referer","url","headers","request"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/integrations/httpcontext.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Event, Integration } from '@sentry/types';\n\nimport { WINDOW } from '../helpers';\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n        const { referrer } = WINDOW.document || {};\n        const { userAgent } = WINDOW.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...event.request, ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}