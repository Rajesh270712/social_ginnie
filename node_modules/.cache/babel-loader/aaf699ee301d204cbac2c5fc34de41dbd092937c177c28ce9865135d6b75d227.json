{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getCurrentHub } from '@sentry/core';\nimport { addInstrumentationHandler, getEventDescription, severityLevelFromString, safeJoin, parseUrl, logger, htmlTreeAsString } from '@sentry/utils';\nimport { WINDOW } from '../helpers.js';\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nvar MAX_ALLOWED_STRING_LENGTH = 1024;\nvar BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /*#__PURE__*/function () {\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    _classCallCheck(this, Breadcrumbs);\n    Breadcrumbs.prototype.__init.call(this);\n    this.options = _objectSpread({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  _createClass(Breadcrumbs, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Breadcrumbs.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      if (this.options.console) {\n        addInstrumentationHandler('console', _consoleBreadcrumb);\n      }\n      if (this.options.dom) {\n        addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n      }\n      if (this.options.xhr) {\n        addInstrumentationHandler('xhr', _xhrBreadcrumb);\n      }\n      if (this.options.fetch) {\n        addInstrumentationHandler('fetch', _fetchBreadcrumb);\n      }\n      if (this.options.history) {\n        addInstrumentationHandler('history', _historyBreadcrumb);\n      }\n    }\n\n    /**\n     * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n     */\n  }, {\n    key: \"addSentryBreadcrumb\",\n    value: function addSentryBreadcrumb(event) {\n      if (this.options.sentry) {\n        getCurrentHub().addBreadcrumb({\n          category: \"sentry.\".concat(event.type === 'transaction' ? 'transaction' : 'event'),\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event)\n        }, {\n          event: event\n        });\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = BREADCRUMB_INTEGRATION_ID;\n    }\n  }]);\n  return Breadcrumbs;\n}();\nBreadcrumbs.__initStatic();\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    var maxStringLength = typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"`dom.maxStringLength` cannot exceed \".concat(MAX_ALLOWED_STRING_LENGTH, \", but a value of \").concat(maxStringLength, \" was configured. Sentry will use \").concat(MAX_ALLOWED_STRING_LENGTH, \" instead.\"));\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target, {\n        keyAttrs: keyAttrs,\n        maxStringLength: maxStringLength\n      }) : htmlTreeAsString(handlerData.event, {\n        keyAttrs: keyAttrs,\n        maxStringLength: maxStringLength\n      });\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\".concat(handlerData.name),\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData) {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (var i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' ')\n  };\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \".concat(safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData) {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n    var _ref = handlerData.xhr.__sentry_xhr__ || {},\n      method = _ref.method,\n      url = _ref.url,\n      status_code = _ref.status_code,\n      body = _ref.body;\n    getCurrentHub().addBreadcrumb({\n      category: 'xhr',\n      data: {\n        method: method,\n        url: url,\n        status_code: status_code\n      },\n      type: 'http'\n    }, {\n      xhr: handlerData.xhr,\n      input: body\n    });\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData) {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: handlerData.fetchData,\n      level: 'error',\n      type: 'http'\n    }, {\n      data: handlerData.error,\n      input: handlerData.args\n    });\n  } else {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: _objectSpread(_objectSpread({}, handlerData.fetchData), {}, {\n        status_code: handlerData.response.status\n      }),\n      type: 'http'\n    }, {\n      input: handlerData.args,\n      response: handlerData.response\n    });\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData) {\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = parseUrl(WINDOW.location.href);\n  var parsedFrom = parseUrl(from);\n  var parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}\nexport { BREADCRUMB_INTEGRATION_ID, Breadcrumbs };","map":{"version":3,"mappings":";;;;;;;AAAA;;AAgBA;;AAeA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAHA,IAIAA;EAWA;AACA;AACA;EACA;;EAGA;AACA;AACA;EACA;IAAA;IAAAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,GACAC,QACA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAPA;IAAA;IAAA;IA1BA;AACA;AACA;IACA;MAAA;IAAA;EAAA;IAAA;IAAA,OA+BA;MACA;QACAC;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;MACA;QACAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;QACAC,8BACA;UACAC;UACAC;UACAC;UACAC;QACA,GACA;UACAC;QACA,EACA;MACA;IACA;EAAA;IAAA;IAAA;IA1EA;AACA;AACA;IACA;MAAA;IAAA;EAAA;EAAA;AAAA;AAwEAd;;AAEA;AACA;AACA;AACA;AACA;AACA;EACA;EACA;IACA;IACA;IAEA,sBACA;IACA;MACA,iEACAe,0DACAC,4JACA;MACAC;IACA;IAEA;MACAC;IACA;;IAEA;IACA;MACAC,oCACAC;QAAAF;QAAAD;MAAA,KACAG;QAAAF;QAAAD;MAAA;IACA;MACAE;IACA;IAEA;MACA;IACA;IAEAV,8BACA;MACAC;MACAG;IACA,GACA;MACAC;MACAO;MACAC;IACA,EACA;EACA;EAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACA;MACAC;MACA;IACA;EACA;EACA;IACAb;IACAc;MACAC;MACAV;IACA;IACAH;IACAC;EACA;EAEA;IACA;MACAa;MACAA;IACA;MACA;MACA;IACA;EACA;EAEAjB;IACAkB;IACAf;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;EACA;IACA;IACA;MACA;IACA;IAEA;MAAAgB;MAAAC;MAAAC;MAAAC;IAEAtB,8BACA;MACAC;MACAc;QACAI;QACAC;QACAC;MACA;MACAE;IACA,GACA;MACA1B;MACAqB;IACA,EACA;IAEA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;EACA;EACA;IACA;EACA;EAEA;IACA;IACA;EACA;EAEA;IACAlB,8BACA;MACAC;MACAc;MACAZ;MACAoB;IACA,GACA;MACAR;MACAG;IACA,EACA;EACA;IACAlB,8BACA;MACAC;MACAc,sCACAD;QACAO;MAAA,EACA;MACAE;IACA,GACA;MACAL;MACAM;IACA,EACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;IACAC;EACA;;EAEA;EACA;EACA;IACAC;EACA;EACA;IACAC;EACA;EAEA3B;IACAC;IACAc;MACAY;MACAD;IACA;EACA;AACA","names":["Breadcrumbs","console","dom","fetch","history","sentry","xhr","options","addInstrumentationHandler","getCurrentHub","category","event_id","level","message","event","logger","MAX_ALLOWED_STRING_LENGTH","maxStringLength","keyAttrs","target","htmlTreeAsString","name","global","handlerData","data","arguments","breadcrumb","input","method","url","status_code","body","type","response","parsedFrom","to","from"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/integrations/breadcrumbs.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event, Integration } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n\n  /**\n   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (this.options.sentry) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, { keyAttrs, maxStringLength })\n        : htmlTreeAsString(handlerData.event as unknown as Node, { keyAttrs, maxStringLength });\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: 'error',\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}