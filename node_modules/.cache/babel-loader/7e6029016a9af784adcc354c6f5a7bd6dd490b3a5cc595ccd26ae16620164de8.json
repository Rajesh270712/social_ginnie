{"ast":null,"code":"import _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill, arrayify, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for Apollo */\nvar Apollo = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n  function Apollo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      useNestjs: false\n    };\n    _classCallCheck(this, Apollo);\n    Apollo.prototype.__init.call(this);\n    this._useNest = !!options.useNestjs;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Apollo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Apollo.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      if (this._useNest) {\n        var pkg = loadModule('@nestjs/graphql');\n        if (!pkg) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n          return;\n        }\n\n        /**\n         * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n         */\n        fill(pkg.GraphQLFactory.prototype, 'mergeWithSchema', function (orig) {\n          return function () {\n            fill(this.resolversExplorerService, 'explore', function (orig) {\n              return function () {\n                var resolvers = arrayify(orig.call(this));\n                var instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n                return instrumentedResolvers;\n              };\n            });\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return orig.call.apply(orig, [this].concat(args));\n          };\n        });\n      } else {\n        var _pkg = loadModule('apollo-server-core');\n        if (!_pkg) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n          return;\n        }\n\n        /**\n         * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n         */\n        fill(_pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n          return function () {\n            if (!this.config.resolvers) {\n              if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n                if (this.config.schema) {\n                  logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' + 'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.');\n                  logger.warn();\n                } else if (this.config.modules) {\n                  logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.');\n                }\n                logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n              }\n              return orig.call(this);\n            }\n            var resolvers = arrayify(this.config.resolvers);\n            this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n            return orig.call(this);\n          };\n        });\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Apollo';\n    }\n  }]);\n  return Apollo;\n}();\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n  return resolvers.map(function (model) {\n    Object.keys(model).forEach(function (resolverGroupName) {\n      Object.keys(model[resolverGroupName]).forEach(function (resolverName) {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  fill(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      var scope = getCurrentHub().getScope();\n      var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n        return _2.getSpan;\n      }, 'call', function (_3) {\n        return _3();\n      }]);\n      var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n        return _4.startChild;\n      }, 'call', function (_5) {\n        return _5({\n          description: \"\".concat(resolverGroupName, \".\").concat(resolverName),\n          op: 'graphql.resolve'\n        });\n      }]);\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var rv = orig.call.apply(orig, [this].concat(args));\n      if (isThenable(rv)) {\n        return rv.then(function (res) {\n          _optionalChain([span, 'optionalAccess', function (_6) {\n            return _6.finish;\n          }, 'call', function (_7) {\n            return _7();\n          }]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', function (_8) {\n        return _8.finish;\n      }, 'call', function (_9) {\n        return _9();\n      }]);\n      return rv;\n    };\n  });\n}\nexport { Apollo };","map":{"version":3,"mappings":";;;;;;AAkBA;AAAA,IACAA;EAaA;;;EAGA,kBAIA;IAAA,IAHAC;MACAC;IACA;IAAA;IACAF;IACA;EACA;;EAEA;;;EAAA;IAAA;IAAA;IAlBA;;;IAGA;MAAA;IAAA;EAAA;IAAA;IAAA,OAkBA;MACA;QACA;QACA;MACA;MAEA;QACA,qBAMA;QAEA;UACA;UACA;QACA;;QAEA;;;QAGAG,KACAC,8BACA,mBACA;UACA,mBAGA;YACAD;cACA;gBACA;gBAEA;gBAEA;cACA;YACA;YAAA,kCAVAE;cAAAA;YAAA;YAYA;UACA;QACA,EACA;MACA;QACA,sBAMA;QAEA;UACA;UACA;QACA;;QAEA;;;QAGAF;UACA,mBAEA;YACA;cACA;gBACA;kBACAG,YACA,wGACA,6GACA;kBACAA;gBACA;kBACAA,YACA,uGACA;gBACA;gBAEAA;cACA;cAEA;YACA;YAEA;YAEA;YAEA;UACA;QACA;MACA;IACA;EAAA;IAAA;IAAA;IAxHA;;;IAGA;MAAA;IAAA;EAAA;EAAA;AAAA;AAsHAN;AAEA;EACA;IACAO;MACAA;QACA;UACA;QACA;QAEAC;MACA;IACA;IAEA;EACA;AACA;;AAEA;;;AAGA,sBACAC,OACAC,mBACAC,cACAC,eACA;EACAT;IACA;MACA;MACA;QAAA;MAAA;QAAA;MAAA;MACA;QAAA;MAAA;QAAA;UACAU;UACAC;QACA;MAAA;MAAA,mCANAT;QAAAA;MAAA;MAQA;MAEA;QACA;UACAU;YAAA;UAAA;YAAA;UAAA;UACA;QACA;MACA;MAEAA;QAAA;MAAA;QAAA;MAAA;MAEA;IACA;EACA;AACA","names":["Apollo","options","useNestjs","fill","pkg","args","logger","Object","wrapResolver","model","resolverGroupName","resolverName","getCurrentHub","description","op","_optionalChain"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/integrations/node/apollo.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { arrayify, fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface ApolloOptions {\n  useNestjs?: boolean;\n}\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Apollo.id;\n\n  private readonly _useNest: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: ApolloOptions = {\n      useNestjs: false,\n    },\n  ) {\n    this._useNest = !!options.useNestjs;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    if (this._useNest) {\n      const pkg = loadModule<{\n        GraphQLFactory: {\n          prototype: {\n            create: (resolvers: ApolloModelResolvers[]) => unknown;\n          };\n        };\n      }>('@nestjs/graphql');\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(\n        pkg.GraphQLFactory.prototype,\n        'mergeWithSchema',\n        function (orig: (this: unknown, ...args: unknown[]) => unknown) {\n          return function (\n            this: { resolversExplorerService: { explore: () => ApolloModelResolvers[] } },\n            ...args: unknown[]\n          ) {\n            fill(this.resolversExplorerService, 'explore', function (orig: () => ApolloModelResolvers[]) {\n              return function (this: unknown) {\n                const resolvers = arrayify(orig.call(this));\n\n                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n                return instrumentedResolvers;\n              };\n            });\n\n            return orig.call(this, ...args);\n          };\n        },\n      );\n    } else {\n      const pkg = loadModule<{\n        ApolloServerBase: {\n          prototype: {\n            constructSchema: (config: unknown) => unknown;\n          };\n        };\n      }>('apollo-server-core');\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: (config: unknown) => unknown) {\n        return function (this: {\n          config: { resolvers?: ApolloModelResolvers[]; schema?: unknown; modules?: unknown };\n        }) {\n          if (!this.config.resolvers) {\n            if (__DEBUG_BUILD__) {\n              if (this.config.schema) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +\n                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',\n                );\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',\n                );\n              }\n\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n\n            return orig.call(this);\n          }\n\n          const resolvers = arrayify(this.config.resolvers);\n\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\n\nfunction instrumentResolvers(resolvers: ApolloModelResolvers[], getCurrentHub: () => Hub): ApolloModelResolvers[] {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n\n      return rv;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}