{"ast":null,"code":"import _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\nfunction isValidPrismaClient(possibleClient) {\n  return possibleClient && !!possibleClient['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nvar Prisma = /*#__PURE__*/function () {\n  /**\n   * Prisma ORM Client Instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function Prisma() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Prisma);\n    Prisma.prototype.__init.call(this);\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Unsupported Prisma client provided to PrismaIntegration. Provided client: \".concat(JSON.stringify(options.client)));\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Prisma, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Prisma.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (!this._client) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('PrismaIntegration is missing a Prisma Client Instance');\n        return;\n      }\n      if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Prisma Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      this._client.$use(function (params, next) {\n        var scope = getCurrentHub().getScope();\n        var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n          return _2.getSpan;\n        }, 'call', function (_3) {\n          return _3();\n        }]);\n        var action = params.action;\n        var model = params.model;\n        var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n          return _4.startChild;\n        }, 'call', function (_5) {\n          return _5({\n            description: model ? \"\".concat(model, \" \").concat(action) : action,\n            op: 'db.sql.prisma'\n          });\n        }]);\n        var rv = next(params);\n        if (isThenable(rv)) {\n          return rv.then(function (res) {\n            _optionalChain([span, 'optionalAccess', function (_6) {\n              return _6.finish;\n            }, 'call', function (_7) {\n              return _7();\n            }]);\n            return res;\n          });\n        }\n        _optionalChain([span, 'optionalAccess', function (_8) {\n          return _8.finish;\n        }, 'call', function (_9) {\n          return _9();\n        }]);\n        return rv;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Prisma';\n    }\n  }]);\n  return Prisma;\n}();\nPrisma.__initStatic();\nexport { Prisma };","map":{"version":3,"mappings":";;;;;AAwCA;EACA;AACA;;AAEA;AAAA,IACAA;EAWA;;;;EAKA;;;EAGA;IAAA;IAAA;IAAAA;IACA;MACA;IACA;MACA,iEACAC,gGACAC,gCACA;IACA;EACA;;EAEA;;;EAAA;IAAA;IAAA;IAxBA;;;IAGA;MAAA;IAAA;EAAA;IAAA;IAAA,OAwBA;MACA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;MAEA;QACA;QACA;UAAA;QAAA;UAAA;QAAA;QAEA;QACA;QAEA;UAAA;QAAA;UAAA;YACAC;YACAC;UACA;QAAA;QAEA;QAEA;UACA;YACAC;cAAA;YAAA;cAAA;YAAA;YACA;UACA;QACA;QAEAA;UAAA;QAAA;UAAA;QAAA;QACA;MACA;IACA;EAAA;IAAA;IAAA;IAnEA;;;IAGA;MAAA;IAAA;EAAA;EAAA;AAAA;AAiEAL","names":["Prisma","logger","JSON","description","op","_optionalChain"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/integrations/node/prisma.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { isThenable, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PrismaAction =\n  | 'findUnique'\n  | 'findMany'\n  | 'findFirst'\n  | 'create'\n  | 'createMany'\n  | 'update'\n  | 'updateMany'\n  | 'upsert'\n  | 'delete'\n  | 'deleteMany'\n  | 'executeRaw'\n  | 'queryRaw'\n  | 'aggregate'\n  | 'count'\n  | 'runCommandRaw';\n\ninterface PrismaMiddlewareParams {\n  model?: unknown;\n  action: PrismaAction;\n  args: unknown;\n  dataPath: string[];\n  runInTransaction: boolean;\n}\n\ntype PrismaMiddleware<T = unknown> = (\n  params: PrismaMiddlewareParams,\n  next: (params: PrismaMiddlewareParams) => Promise<T>,\n) => Promise<T>;\n\ninterface PrismaClient {\n  $use: (cb: PrismaMiddleware) => void;\n}\n\nfunction isValidPrismaClient(possibleClient: unknown): possibleClient is PrismaClient {\n  return possibleClient && !!(possibleClient as PrismaClient)['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nexport class Prisma implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Prisma';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Prisma.id;\n\n  /**\n   * Prisma ORM Client Instance\n   */\n  private readonly _client?: PrismaClient;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { client?: unknown } = {}) {\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `Unsupported Prisma client provided to PrismaIntegration. Provided client: ${JSON.stringify(options.client)}`,\n        );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._client) {\n      __DEBUG_BUILD__ && logger.error('PrismaIntegration is missing a Prisma Client Instance');\n      return;\n    }\n\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Prisma Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    this._client.$use((params, next: (params: PrismaMiddlewareParams) => Promise<unknown>) => {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n\n      const action = params.action;\n      const model = params.model;\n\n      const span = parentSpan?.startChild({\n        description: model ? `${model} ${action}` : action,\n        op: 'db.sql.prisma',\n      });\n\n      const rv = next(params);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n      return rv;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}