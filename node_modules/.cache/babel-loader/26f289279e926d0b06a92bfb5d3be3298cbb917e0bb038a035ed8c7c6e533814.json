{"ast":null,"code":"/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nfunction _startChild(transaction, _ref) {\n  let {\n    startTimestamp,\n    ...ctx\n  } = _ref;\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx\n  });\n}\nexport { _startChild, isMeasurementValue };","map":{"version":3,"mappings":"AAIA;AACA;AACA;AACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;EAAA;IAAAA;IAAA;EAAA;EACA;IACAC;EACA;EAEA;IACAD;IACA;EACA;AACA","names":["startTimestamp","transaction"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/browser/metrics/utils.ts"],"sourcesContent":["import type { Span, SpanContext } from '@sentry/types';\n\nimport type { Transaction } from '../../transaction';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}