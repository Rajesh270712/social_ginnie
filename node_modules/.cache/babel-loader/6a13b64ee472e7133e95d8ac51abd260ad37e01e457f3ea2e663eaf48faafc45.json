{"ast":null,"code":"import { ROUTE_ABANDONED_PAGE, ROUTE_ERROR_PAGE, ROUTE_GENERIC_PAGE, ROUTE_INSTA_EDUCATION_PAGE, ROUTE_SUCCESS_PAGE } from \"../Routes/RouteMapping\";\nimport { CONNECTED_STORAGE_WORK_PLATFORM_ID, CONNECTION_ABANDONED, CONNECTION_ERROR, CONNECTION_SUCCESS, INSTAGRAM_WORK_PLATFORM_ID, PRODUCTION_ENVIRONMENT, STAGING_ENVIRONMENT, STORAGE_AUTH_DATA, STORAGE_AUTH_SDK_TOKEN, STORAGE_AUTH_TENANT_APP_NAME, STORAGE_AUTH_USER_ID, STORAGE_CONNECTION_STATE, STORAGE_CREATOR_ENVIRONMENT, STORAGE_WORK_PLATFORM_ID } from \"./constants\";\nexport const navigateToPlatformEducationPage = navigate => {\n  const platform = sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID);\n  if (platform === INSTAGRAM_WORK_PLATFORM_ID) {\n    navigate(ROUTE_INSTA_EDUCATION_PAGE);\n  } else {\n    navigate(ROUTE_GENERIC_PAGE);\n  }\n};\nexport const launchSDK = async (setLoader, navigate, id) => {\n  setLoader(true);\n  let env;\n  try {\n    // const environment = process.env.REACT_APP_SDK_ENVIRONMENT;\n    const environment = sessionStorage.getItem(STORAGE_CREATOR_ENVIRONMENT).toLowerCase();\n    if (environment === STAGING_ENVIRONMENT) env = process.env.REACT_APP_SDK_ENVIRONMENT_STAGING;else if (environment === PRODUCTION_ENVIRONMENT) env = process.env.REACT_APP_SDK_ENVIRONMENT_PRODUCTION;\n    const auth = JSON.parse(sessionStorage.getItem(STORAGE_AUTH_DATA));\n    const clientDisplayName = auth[STORAGE_AUTH_TENANT_APP_NAME];\n    let workPlatformId;\n    //clear connection state\n    sessionStorage.removeItem(STORAGE_CONNECTION_STATE);\n\n    // if id not passed get from storage\n    if (id === undefined) {\n      workPlatformId = sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"undefined\" && sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"null\" ? sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) : null;\n    } else {\n      workPlatformId = id;\n    }\n    const userId = auth[STORAGE_AUTH_USER_ID];\n    let token = auth[STORAGE_AUTH_SDK_TOKEN];\n\n    //   if (!userId || !token) {\n    //     const timeStamp = new Date();\n    //     const userId = await createUser(clientDisplayName, timeStamp.getTime());\n\n    //     const token = await createUserToken(userId);\n    //     sessionStorage.setItem(\"PhylloUserId\", userId);\n    //     sessionStorage.setItem(\"PhylloToken\", token);\n    //   }\n    // const phylloConnectURL = await window.PhylloConnectSDK.clientConnect(\n    //   env,\n    //   userId,\n    //   token,\n    //   name,\n    //   workPlatformId\n    // );\n    // window.location.href = phylloConnectURL;\n    const config = {\n      clientDisplayName,\n      environment: env,\n      userId,\n      token,\n      redirect: false,\n      workPlatformId\n    };\n    const onExitCallBack = (reason, userId) => {\n      console.log(`onExit reason: ${reason}, userId: ${userId}`);\n      //check state\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        navigate(ROUTE_SUCCESS_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ABANDONED) {\n        navigate(ROUTE_ABANDONED_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ERROR) {\n        navigate(ROUTE_ERROR_PAGE);\n        setLoader(false);\n        return;\n      } else {\n        if (reason === \"BACK_PRESSED\") {\n          setLoader(false);\n          return;\n        } else {\n          navigate(ROUTE_ABANDONED_PAGE);\n          setLoader(false);\n          return;\n        }\n      }\n      //   history.go(0);\n    };\n\n    const onAccountConnectedCallBack = (accountId, workplatformId, userId) => {\n      sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_SUCCESS);\n      sessionStorage.setItem(CONNECTED_STORAGE_WORK_PLATFORM_ID, workplatformId);\n      console.log(`onAccountConnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`);\n    };\n    const onAccountDisconnectedCallBack = (accountId, workplatformId, userId) => {\n      console.log(`onAccountDisconnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`);\n    };\n    const onTokenExpiredCallBack = userId => {\n      console.log(`onTokenExpired userId: ${userId}`);\n    };\n    const onConnectionFailure = (reason, workplatformId, userId) => {\n      sessionStorage.setItem(CONNECTED_STORAGE_WORK_PLATFORM_ID, workplatformId);\n      // if state not success\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        return;\n      }\n      if (reason === \"CONNECTION_ABANDONED\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ABANDONED);\n      } else if (reason === \"INCORRECT_ACCOUNT_TYPE\" || reason === \"INADEQUATE_PERMISSIONS\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      } else {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      }\n      console.log(`onConnectionFailure: ${reason}, ${workplatformId}, ${userId}`);\n    };\n    const phylloConnect = window.PhylloConnect.initialize(config);\n    phylloConnect.on(\"exit\", onExitCallBack);\n    phylloConnect.on(\"tokenExpired\", onTokenExpiredCallBack);\n    phylloConnect.on(\"accountConnected\", onAccountConnectedCallBack);\n    phylloConnect.on(\"accountDisconnected\", onAccountDisconnectedCallBack);\n    phylloConnect.on(\"connectionFailure\", onConnectionFailure);\n    phylloConnect.open();\n  } catch (err) {\n    console.log(err);\n    setLoader(false);\n    throw err;\n  }\n};\nexport const isEmpty = val => {\n  switch (typeof val) {\n    case \"object\":\n      if (Object.keys(val).length === 0) return true;\n      return false;\n    case \"string\":\n      if (val === \"\") return true;\n      return false;\n    default:\n      if (val !== null && val !== undefined) return false;\n      return true;\n  }\n};","map":{"version":3,"names":["ROUTE_ABANDONED_PAGE","ROUTE_ERROR_PAGE","ROUTE_GENERIC_PAGE","ROUTE_INSTA_EDUCATION_PAGE","ROUTE_SUCCESS_PAGE","CONNECTED_STORAGE_WORK_PLATFORM_ID","CONNECTION_ABANDONED","CONNECTION_ERROR","CONNECTION_SUCCESS","INSTAGRAM_WORK_PLATFORM_ID","PRODUCTION_ENVIRONMENT","STAGING_ENVIRONMENT","STORAGE_AUTH_DATA","STORAGE_AUTH_SDK_TOKEN","STORAGE_AUTH_TENANT_APP_NAME","STORAGE_AUTH_USER_ID","STORAGE_CONNECTION_STATE","STORAGE_CREATOR_ENVIRONMENT","STORAGE_WORK_PLATFORM_ID","navigateToPlatformEducationPage","navigate","platform","sessionStorage","getItem","launchSDK","setLoader","id","env","environment","toLowerCase","process","REACT_APP_SDK_ENVIRONMENT_STAGING","REACT_APP_SDK_ENVIRONMENT_PRODUCTION","auth","JSON","parse","clientDisplayName","workPlatformId","removeItem","undefined","userId","token","config","redirect","onExitCallBack","reason","console","log","state","onAccountConnectedCallBack","accountId","workplatformId","setItem","onAccountDisconnectedCallBack","onTokenExpiredCallBack","onConnectionFailure","phylloConnect","window","PhylloConnect","initialize","on","open","err","isEmpty","val","Object","keys","length"],"sources":["/Users/rajeshbagul/code/ai-hackathon/src/utils/helpers.js"],"sourcesContent":["import { ROUTE_ABANDONED_PAGE, ROUTE_ERROR_PAGE, ROUTE_GENERIC_PAGE, ROUTE_INSTA_EDUCATION_PAGE, ROUTE_SUCCESS_PAGE } from \"../Routes/RouteMapping\";\nimport {\n  CONNECTED_STORAGE_WORK_PLATFORM_ID,\n  CONNECTION_ABANDONED,\n  CONNECTION_ERROR,\n  CONNECTION_SUCCESS,\n  INSTAGRAM_WORK_PLATFORM_ID,\n  PRODUCTION_ENVIRONMENT,\n  STAGING_ENVIRONMENT,\n  STORAGE_AUTH_DATA,\n  STORAGE_AUTH_SDK_TOKEN,\n  STORAGE_AUTH_TENANT_APP_NAME,\n  STORAGE_AUTH_USER_ID,\n  STORAGE_CONNECTION_STATE,\n  STORAGE_CREATOR_ENVIRONMENT,\n  STORAGE_WORK_PLATFORM_ID,\n} from \"./constants\";\n\nexport const navigateToPlatformEducationPage = (navigate) => {\n  const platform = sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID);\n  if (platform === INSTAGRAM_WORK_PLATFORM_ID) {\n    navigate(ROUTE_INSTA_EDUCATION_PAGE);\n  } else {\n    navigate(ROUTE_GENERIC_PAGE);\n  }\n};\n\nexport const launchSDK = async (setLoader, navigate, id) => {\n  setLoader(true);\n  let env;\n  try {\n    // const environment = process.env.REACT_APP_SDK_ENVIRONMENT;\n    const environment = sessionStorage.getItem(STORAGE_CREATOR_ENVIRONMENT).toLowerCase();\n    if (environment === STAGING_ENVIRONMENT) env = process.env.REACT_APP_SDK_ENVIRONMENT_STAGING;\n    else if (environment === PRODUCTION_ENVIRONMENT) env = process.env.REACT_APP_SDK_ENVIRONMENT_PRODUCTION;\n    const auth = JSON.parse(sessionStorage.getItem(STORAGE_AUTH_DATA));\n    const clientDisplayName = auth[STORAGE_AUTH_TENANT_APP_NAME];\n    let workPlatformId;\n    //clear connection state\n    sessionStorage.removeItem(STORAGE_CONNECTION_STATE);\n\n    // if id not passed get from storage\n    if (id === undefined) {\n      workPlatformId =\n        sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"undefined\" && sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"null\"\n          ? sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID)\n          : null;\n    } else {\n      workPlatformId = id;\n    }\n\n    const userId = auth[STORAGE_AUTH_USER_ID];\n    let token = auth[STORAGE_AUTH_SDK_TOKEN];\n\n    //   if (!userId || !token) {\n    //     const timeStamp = new Date();\n    //     const userId = await createUser(clientDisplayName, timeStamp.getTime());\n\n    //     const token = await createUserToken(userId);\n    //     sessionStorage.setItem(\"PhylloUserId\", userId);\n    //     sessionStorage.setItem(\"PhylloToken\", token);\n    //   }\n    // const phylloConnectURL = await window.PhylloConnectSDK.clientConnect(\n    //   env,\n    //   userId,\n    //   token,\n    //   name,\n    //   workPlatformId\n    // );\n    // window.location.href = phylloConnectURL;\n    const config = {\n      clientDisplayName,\n      environment: env,\n      userId,\n      token,\n      redirect: false,\n      workPlatformId,\n    };\n    const onExitCallBack = (reason, userId) => {\n      console.log(`onExit reason: ${reason}, userId: ${userId}`);\n      //check state\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        navigate(ROUTE_SUCCESS_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ABANDONED) {\n        navigate(ROUTE_ABANDONED_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ERROR) {\n        navigate(ROUTE_ERROR_PAGE);\n        setLoader(false);\n        return;\n      } else {\n        if (reason === \"BACK_PRESSED\") {\n          setLoader(false);\n          return;\n        } else {\n          navigate(ROUTE_ABANDONED_PAGE);\n          setLoader(false);\n          return;\n        }\n      }\n      //   history.go(0);\n    };\n\n    const onAccountConnectedCallBack = (accountId, workplatformId, userId) => {\n      sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_SUCCESS);\n      sessionStorage.setItem(CONNECTED_STORAGE_WORK_PLATFORM_ID, workplatformId);\n      console.log(`onAccountConnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`);\n    };\n    const onAccountDisconnectedCallBack = (accountId, workplatformId, userId) => {\n      console.log(`onAccountDisconnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`);\n    };\n    const onTokenExpiredCallBack = (userId) => {\n      console.log(`onTokenExpired userId: ${userId}`);\n    };\n\n    const onConnectionFailure = (reason, workplatformId, userId) => {\n      sessionStorage.setItem(CONNECTED_STORAGE_WORK_PLATFORM_ID, workplatformId);\n      // if state not success\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        return;\n      }\n      if (reason === \"CONNECTION_ABANDONED\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ABANDONED);\n      } else if (reason === \"INCORRECT_ACCOUNT_TYPE\" || reason === \"INADEQUATE_PERMISSIONS\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      } else {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      }\n\n      console.log(`onConnectionFailure: ${reason}, ${workplatformId}, ${userId}`);\n    };\n\n    const phylloConnect = window.PhylloConnect.initialize(config);\n\n    phylloConnect.on(\"exit\", onExitCallBack);\n    phylloConnect.on(\"tokenExpired\", onTokenExpiredCallBack);\n    phylloConnect.on(\"accountConnected\", onAccountConnectedCallBack);\n    phylloConnect.on(\"accountDisconnected\", onAccountDisconnectedCallBack);\n    phylloConnect.on(\"connectionFailure\", onConnectionFailure);\n\n    phylloConnect.open();\n  } catch (err) {\n    console.log(err);\n    setLoader(false);\n    throw err;\n  }\n};\n\nexport const isEmpty = (val) => {\n  switch (typeof val) {\n    case \"object\":\n      if (Object.keys(val).length === 0) return true;\n      return false;\n    case \"string\":\n      if (val === \"\") return true;\n      return false;\n    default:\n      if (val !== null && val !== undefined) return false;\n      return true;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}