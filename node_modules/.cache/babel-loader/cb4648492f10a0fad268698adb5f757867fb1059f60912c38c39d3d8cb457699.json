{"ast":null,"code":"import _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-mysql package */\nvar Mysql = /*#__PURE__*/function () {\n  function Mysql() {\n    _classCallCheck(this, Mysql);\n    Mysql.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(Mysql, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Mysql.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Mysql Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = loadModule('mysql/lib/Connection.js');\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Mysql Integration was unable to require `mysql` package.');\n        return;\n      }\n\n      // The original function will have one of these signatures:\n      //    function (callback) => void\n      //    function (options, callback) => void\n      //    function (options, values, callback) => void\n      fill(pkg, 'createQuery', function (orig) {\n        return function (options, values, callback) {\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n            return _2.getSpan;\n          }, 'call', function (_3) {\n            return _3();\n          }]);\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n            return _4.startChild;\n          }, 'call', function (_5) {\n            return _5({\n              description: typeof options === 'string' ? options : options.sql,\n              op: 'db'\n            });\n          }]);\n          if (typeof callback === 'function') {\n            return orig.call(this, options, values, function (err, result, fields) {\n              _optionalChain([span, 'optionalAccess', function (_6) {\n                return _6.finish;\n              }, 'call', function (_7) {\n                return _7();\n              }]);\n              callback(err, result, fields);\n            });\n          }\n          if (typeof values === 'function') {\n            return orig.call(this, options, function (err, result, fields) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n              values(err, result, fields);\n            });\n          }\n          return orig.call(this, options, values, callback);\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'Mysql';\n    }\n  }]);\n  return Mysql;\n}();\nMysql.__initStatic();\nexport { Mysql };","map":{"version":3,"mappings":";;;;;;AAUA;AAAA,IACAA;EAAA;IAAA;IAAAA;EAAA;EACA;;;EAAA;IAAA;IAAA;IAKA;;;IAGA;MAAA;IAAA;;IAEA;;;EAAA;IAAA;IAAA,OAGA;MACA;QACA;QACA;MACA;MAEA;MAEA;QACA;QACA;MACA;;MAEA;MACA;MACA;MACA;MACAC;QACA;UACA;UACA;YAAA;UAAA;YAAA;UAAA;UACA;YAAA;UAAA;YAAA;cACAC;cACAC;YACA;UAAA;UAEA;YACA;cACAC;gBAAA;cAAA;gBAAA;cAAA;cACAC;YACA;UACA;UAEA;YACA;cACAD;gBAAA;cAAA;gBAAA;cAAA;cACAE;YACA;UACA;UAEA;QACA;MACA;IACA;EAAA;IAAA;IAAA,OArDA;MAAA;IAAA;EAAA;EAAA;AAAA;AAsDAN","names":["Mysql","fill","description","op","_optionalChain","callback","values"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/integrations/node/mysql.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { fill, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface MysqlConnection {\n  createQuery: () => void;\n}\n\n/** Tracing integration for node-mysql package */\nexport class Mysql implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mysql';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Mysql.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Mysql Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = loadModule<MysqlConnection>('mysql/lib/Connection.js');\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    }\n\n    // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n    fill(pkg, 'createQuery', function (orig: () => void) {\n      return function (this: unknown, options: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof options === 'string' ? options : (options as { sql: string }).sql,\n          op: 'db',\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function (err: Error, result: unknown, fields: unknown) {\n            span?.finish();\n            callback(err, result, fields);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, options, function (err: Error, result: unknown, fields: unknown) {\n            span?.finish();\n            values(err, result, fields);\n          });\n        }\n\n        return orig.call(this, options, values, callback);\n      };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}