{"ast":null,"code":"import { ROUTE_ABANDONED_PAGE, ROUTE_ERROR_PAGE, ROUTE_GENERIC_PAGE, ROUTE_INSTA_EDUCATION_PAGE, ROUTE_SUCCESS_PAGE } from \"../Routes/RouteMapping\";\nimport { CONNECTED_STORAGE_WORK_PLATFORM_ID, CONNECTION_ABANDONED, CONNECTION_ERROR, CONNECTION_SUCCESS, INSTAGRAM_WORK_PLATFORM_ID, STORAGE_AUTH_DATA, STORAGE_AUTH_SDK_TOKEN, STORAGE_AUTH_TENANT_APP_NAME, STORAGE_AUTH_USER_ID, STORAGE_CONNECTION_STATE, STORAGE_WORK_PLATFORM_ID } from \"./constants\";\nexport const navigateToPlatformEducationPage = navigate => {\n  const platform = sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID);\n  if (platform === INSTAGRAM_WORK_PLATFORM_ID) {\n    navigate(ROUTE_INSTA_EDUCATION_PAGE);\n  } else {\n    navigate(ROUTE_GENERIC_PAGE);\n  }\n};\nexport const launchSDK = async (setLoader, navigate, id) => {\n  setLoader(true);\n  try {\n    const environment = process.env.REACT_APP_SDK_ENVIRONMENT;\n    const auth = JSON.parse(sessionStorage.getItem(STORAGE_AUTH_DATA));\n    const clientDisplayName = auth[STORAGE_AUTH_TENANT_APP_NAME];\n    let workPlatformId;\n    //clear connection state\n    sessionStorage.removeItem(STORAGE_CONNECTION_STATE);\n\n    // if id not passed get from storage\n    if (id === undefined) {\n      workPlatformId = sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"undefined\" && sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"null\" ? sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) : null;\n    } else {\n      workPlatformId = id;\n    }\n    const userId = auth[STORAGE_AUTH_USER_ID];\n    let token = auth[STORAGE_AUTH_SDK_TOKEN];\n\n    //   if (!userId || !token) {\n    //     const timeStamp = new Date();\n    //     const userId = await createUser(clientDisplayName, timeStamp.getTime());\n\n    //     const token = await createUserToken(userId);\n    //     sessionStorage.setItem(\"PhylloUserId\", userId);\n    //     sessionStorage.setItem(\"PhylloToken\", token);\n    //   }\n    // const phylloConnectURL = await window.PhylloConnectSDK.clientConnect(\n    //   env,\n    //   userId,\n    //   token,\n    //   name,\n    //   workPlatformId\n    // );\n    // window.location.href = phylloConnectURL;\n    const config = {\n      clientDisplayName,\n      environment,\n      userId,\n      token,\n      redirect: false,\n      workPlatformId\n    };\n    const onExitCallBack = (reason, userId) => {\n      console.log(`onExit reason: ${reason}, userId: ${userId}`);\n      //check state\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        navigate(ROUTE_SUCCESS_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ABANDONED) {\n        navigate(ROUTE_ABANDONED_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ERROR) {\n        navigate(ROUTE_ERROR_PAGE);\n        setLoader(false);\n        return;\n      } else {\n        if (reason === \"BACK_PRESSED\") {\n          setLoader(false);\n          return;\n        } else {\n          navigate(ROUTE_ABANDONED_PAGE);\n          setLoader(false);\n          return;\n        }\n      }\n      //   history.go(0);\n    };\n\n    const onAccountConnectedCallBack = (accountId, workplatformId, userId) => {\n      sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_SUCCESS);\n      console.log(`onAccountConnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`);\n    };\n    const onAccountDisconnectedCallBack = (accountId, workplatformId, userId) => {\n      console.log(`onAccountDisconnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`);\n    };\n    const onTokenExpiredCallBack = userId => {\n      console.log(`onTokenExpired userId: ${userId}`);\n    };\n    const onConnectionFailure = (reason, workplatformId, userId) => {\n      sessionStorage.setItem(CONNECTED_STORAGE_WORK_PLATFORM_ID, workplatformId);\n      // if state not success\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        return;\n      }\n      if (reason === \"CONNECTION_ABANDONED\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ABANDONED);\n      } else if (reason === \"INCORRECT_ACCOUNT_TYPE\" || reason === \"INADEQUATE_PERMISSIONS\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      } else {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      }\n      console.log(`onConnectionFailure: ${reason}, ${workplatformId}, ${userId}`);\n    };\n    const phylloConnect = window.PhylloConnect.initialize(config);\n    phylloConnect.on(\"exit\", onExitCallBack);\n    phylloConnect.on(\"tokenExpired\", onTokenExpiredCallBack);\n    phylloConnect.on(\"accountConnected\", onAccountConnectedCallBack);\n    phylloConnect.on(\"accountDisconnected\", onAccountDisconnectedCallBack);\n    phylloConnect.on(\"connectionFailure\", onConnectionFailure);\n    phylloConnect.open();\n  } catch (err) {\n    console.log(err);\n    setLoader(false);\n  }\n};","map":{"version":3,"names":["ROUTE_ABANDONED_PAGE","ROUTE_ERROR_PAGE","ROUTE_GENERIC_PAGE","ROUTE_INSTA_EDUCATION_PAGE","ROUTE_SUCCESS_PAGE","CONNECTED_STORAGE_WORK_PLATFORM_ID","CONNECTION_ABANDONED","CONNECTION_ERROR","CONNECTION_SUCCESS","INSTAGRAM_WORK_PLATFORM_ID","STORAGE_AUTH_DATA","STORAGE_AUTH_SDK_TOKEN","STORAGE_AUTH_TENANT_APP_NAME","STORAGE_AUTH_USER_ID","STORAGE_CONNECTION_STATE","STORAGE_WORK_PLATFORM_ID","navigateToPlatformEducationPage","navigate","platform","sessionStorage","getItem","launchSDK","setLoader","id","environment","process","env","REACT_APP_SDK_ENVIRONMENT","auth","JSON","parse","clientDisplayName","workPlatformId","removeItem","undefined","userId","token","config","redirect","onExitCallBack","reason","console","log","state","onAccountConnectedCallBack","accountId","workplatformId","setItem","onAccountDisconnectedCallBack","onTokenExpiredCallBack","onConnectionFailure","phylloConnect","window","PhylloConnect","initialize","on","open","err"],"sources":["/Users/rajeshbagul/code/connect-account-creator/src/utils/helpers.js"],"sourcesContent":["import {\n  ROUTE_ABANDONED_PAGE,\n  ROUTE_ERROR_PAGE,\n  ROUTE_GENERIC_PAGE,\n  ROUTE_INSTA_EDUCATION_PAGE,\n  ROUTE_SUCCESS_PAGE,\n} from \"../Routes/RouteMapping\";\nimport {\n  CONNECTED_STORAGE_WORK_PLATFORM_ID,\n  CONNECTION_ABANDONED,\n  CONNECTION_ERROR,\n  CONNECTION_SUCCESS,\n  INSTAGRAM_WORK_PLATFORM_ID,\n  STORAGE_AUTH_DATA,\n  STORAGE_AUTH_SDK_TOKEN,\n  STORAGE_AUTH_TENANT_APP_NAME,\n  STORAGE_AUTH_USER_ID,\n  STORAGE_CONNECTION_STATE,\n  STORAGE_WORK_PLATFORM_ID,\n} from \"./constants\";\n\nexport const navigateToPlatformEducationPage = (navigate) => {\n  const platform = sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID);\n  if (platform === INSTAGRAM_WORK_PLATFORM_ID) {\n    navigate(ROUTE_INSTA_EDUCATION_PAGE);\n  } else {\n    navigate(ROUTE_GENERIC_PAGE);\n  }\n};\n\nexport const launchSDK = async (setLoader, navigate, id) => {\n  setLoader(true);\n  try {\n    const environment = process.env.REACT_APP_SDK_ENVIRONMENT;\n    const auth = JSON.parse(sessionStorage.getItem(STORAGE_AUTH_DATA));\n    const clientDisplayName = auth[STORAGE_AUTH_TENANT_APP_NAME];\n    let workPlatformId;\n    //clear connection state\n    sessionStorage.removeItem(STORAGE_CONNECTION_STATE);\n\n    // if id not passed get from storage\n    if (id === undefined) {\n      workPlatformId =\n        sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"undefined\" &&\n        sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID) !== \"null\"\n          ? sessionStorage.getItem(STORAGE_WORK_PLATFORM_ID)\n          : null;\n    } else {\n      workPlatformId = id;\n    }\n\n    const userId = auth[STORAGE_AUTH_USER_ID];\n    let token = auth[STORAGE_AUTH_SDK_TOKEN];\n\n    //   if (!userId || !token) {\n    //     const timeStamp = new Date();\n    //     const userId = await createUser(clientDisplayName, timeStamp.getTime());\n\n    //     const token = await createUserToken(userId);\n    //     sessionStorage.setItem(\"PhylloUserId\", userId);\n    //     sessionStorage.setItem(\"PhylloToken\", token);\n    //   }\n    // const phylloConnectURL = await window.PhylloConnectSDK.clientConnect(\n    //   env,\n    //   userId,\n    //   token,\n    //   name,\n    //   workPlatformId\n    // );\n    // window.location.href = phylloConnectURL;\n    const config = {\n      clientDisplayName,\n      environment,\n      userId,\n      token,\n      redirect: false,\n      workPlatformId,\n    };\n    const onExitCallBack = (reason, userId) => {\n      console.log(`onExit reason: ${reason}, userId: ${userId}`);\n      //check state\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        navigate(ROUTE_SUCCESS_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ABANDONED) {\n        navigate(ROUTE_ABANDONED_PAGE);\n        setLoader(false);\n        return;\n      } else if (state === CONNECTION_ERROR) {\n        navigate(ROUTE_ERROR_PAGE);\n        setLoader(false);\n        return;\n      } else {\n        if (reason === \"BACK_PRESSED\") {\n          setLoader(false);\n          return;\n        } else {\n          navigate(ROUTE_ABANDONED_PAGE);\n          setLoader(false);\n          return;\n        }\n      }\n      //   history.go(0);\n    };\n\n    const onAccountConnectedCallBack = (accountId, workplatformId, userId) => {\n      sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_SUCCESS);\n      console.log(\n        `onAccountConnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`\n      );\n    };\n    const onAccountDisconnectedCallBack = (\n      accountId,\n      workplatformId,\n      userId\n    ) => {\n      console.log(\n        `onAccountDisconnected accountId: ${accountId}, workplatformId: ${workplatformId}, userId: ${userId}`\n      );\n    };\n    const onTokenExpiredCallBack = (userId) => {\n      console.log(`onTokenExpired userId: ${userId}`);\n    };\n\n    const onConnectionFailure = (reason, workplatformId, userId) => {\n      sessionStorage.setItem(\n        CONNECTED_STORAGE_WORK_PLATFORM_ID,\n        workplatformId\n      );\n      // if state not success\n      const state = sessionStorage.getItem(STORAGE_CONNECTION_STATE);\n      if (state === CONNECTION_SUCCESS) {\n        return;\n      }\n      if (reason === \"CONNECTION_ABANDONED\") {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ABANDONED);\n      } else if (\n        reason === \"INCORRECT_ACCOUNT_TYPE\" ||\n        reason === \"INADEQUATE_PERMISSIONS\"\n      ) {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      } else {\n        sessionStorage.setItem(STORAGE_CONNECTION_STATE, CONNECTION_ERROR);\n      }\n\n      console.log(\n        `onConnectionFailure: ${reason}, ${workplatformId}, ${userId}`\n      );\n    };\n\n    const phylloConnect = window.PhylloConnect.initialize(config);\n\n    phylloConnect.on(\"exit\", onExitCallBack);\n    phylloConnect.on(\"tokenExpired\", onTokenExpiredCallBack);\n    phylloConnect.on(\"accountConnected\", onAccountConnectedCallBack);\n    phylloConnect.on(\"accountDisconnected\", onAccountDisconnectedCallBack);\n    phylloConnect.on(\"connectionFailure\", onConnectionFailure);\n\n    phylloConnect.open();\n  } catch (err) {\n    console.log(err);\n    setLoader(false);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}