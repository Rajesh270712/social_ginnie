{"ast":null,"code":"// import platform from \"platform\";\n// import { STORAGE_CREATOR_INVITE_ID } from \"../utils/constants\";\n// import { isEmpty } from \"../utils/helpers\";\n// export const MICROSITE_LANDING_PAGE_VIEW = \"MICROSITE_LANDING_PAGE_VIEW\";\n// export const MICROSITE_CONNECT_ACCOUNT_INITIATED = \"MICROSITE_CONNECT_ACCOUNT_INITIATED\";\n// export const MICROSITE_INSTRUCTIONS_SCREEN_VIEW = \"MICROSITE_INSTRUCTIONS_SCREEN_VIEW\";\n// export const MICROSITE_CONNECT_ACCOUNT_SUCCESS = \"MICROSITE_CONNECT_ACCOUNT_SUCCESS\";\n// export const MICROSITE_CONNECT_MORE_ACCOUNTS = \"MICROSITE_CONNECT_MORE_ACCOUNTS\";\n// export const MICROSITE_CONNECT_ACCOUNT_FAILED = \"MICROSITE_CONNECT_ACCOUNT_FAILED\";\n// export const MICROSITE_CONNECT_TRY_AGAIN = \"MICROSITE_CONNECT_TRY_AGAIN\";\n// export const MICROSITE_CONNECT_ANOTHER_ACCOUNT = \"MICROSITE_CONNECT_ANOTHER_ACCOUNT\";\n// let analyticsToSend;\n// // identity\n// export const logUser = (userId, userObj) => {\n//   window.analytics.identify(userId, userObj);\n// };\n// // track\n// export const trackEvent = async (eventName, eventObj = {}) => {\n//   if (isEmpty(analyticsToSend)) await updateAnalytics();\n//   const eventToSend = { ...eventObj, ...analyticsToSend };\n//   window.analytics.track(eventName, eventToSend);\n// };\n// // page\n// export const changePage = (page, params = {}) => {\n//   window.analytics.page(page, params);\n// };\n// export const updateAnalytics = async (params) => {\n//   try {\n//     const deviceLocale = window.navigator.languages;\n//     const browserLocale = window.navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n//     const { userAgent } = window.navigator;\n//     const {\n//       product,\n//       manufacturer,\n//       os: { family: deviceOs },\n//       os: { version: deviceOsVersion },\n//     } = platform;\n//     const { name: browser, version: browserVersion } = platform.parse(userAgent);\n//     let IPAddress;\n//     try {\n//       const res = await fetch(\"https://geolocation-db.com/json/\");\n//       const response = await res.json();\n//       IPAddress = response?.IPv4;\n//     } catch (e) {\n//       IPAddress = \"Not found\";\n//     }\n//     const analyticsPayload = {\n//       device_manufacturer: manufacturer,\n//       device_name: product,\n//       device_model: product,\n//       device_os: deviceOs,\n//       device_os_version: deviceOsVersion,\n//       device_locale: deviceLocale,\n//       device_language: window.navigator.languages,\n//       device_timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n//       device_dimensions_width: window.screen.width,\n//       device_dimensions_height: window.screen.height,\n//       viewport_width: window.innerWidth,\n//       viewport_height: window.innerHeight,\n//       ip_address: IPAddress,\n//       network_type: navigator?.connection?.effectiveType,\n//       browser_name: browser,\n//       browser_version: browserVersion,\n//       browser_locale: browserLocale,\n//       browser_user_agent: userAgent,\n//       params,\n//       sdk: params?.sdk ? params?.sdk : \"web\",\n//       os: deviceOs,\n//       user_id: params?.userId,\n//       app_name: params?.appName,\n//       creator_invite_id: sessionStorage.getItem(STORAGE_CREATOR_INVITE_ID),\n//     };\n//     analyticsToSend = analyticsPayload;\n//     return analyticsPayload;\n//   } catch (e) {\n//     console.log(e);\n//   }\n// };","map":{"version":3,"names":[],"sources":["/Users/rajeshbagul/code/ai-hackathon/src/analytics/index.js"],"sourcesContent":["// import platform from \"platform\";\n// import { STORAGE_CREATOR_INVITE_ID } from \"../utils/constants\";\n// import { isEmpty } from \"../utils/helpers\";\n\n// export const MICROSITE_LANDING_PAGE_VIEW = \"MICROSITE_LANDING_PAGE_VIEW\";\n// export const MICROSITE_CONNECT_ACCOUNT_INITIATED = \"MICROSITE_CONNECT_ACCOUNT_INITIATED\";\n// export const MICROSITE_INSTRUCTIONS_SCREEN_VIEW = \"MICROSITE_INSTRUCTIONS_SCREEN_VIEW\";\n// export const MICROSITE_CONNECT_ACCOUNT_SUCCESS = \"MICROSITE_CONNECT_ACCOUNT_SUCCESS\";\n// export const MICROSITE_CONNECT_MORE_ACCOUNTS = \"MICROSITE_CONNECT_MORE_ACCOUNTS\";\n// export const MICROSITE_CONNECT_ACCOUNT_FAILED = \"MICROSITE_CONNECT_ACCOUNT_FAILED\";\n// export const MICROSITE_CONNECT_TRY_AGAIN = \"MICROSITE_CONNECT_TRY_AGAIN\";\n// export const MICROSITE_CONNECT_ANOTHER_ACCOUNT = \"MICROSITE_CONNECT_ANOTHER_ACCOUNT\";\n\n// let analyticsToSend;\n// // identity\n// export const logUser = (userId, userObj) => {\n//   window.analytics.identify(userId, userObj);\n// };\n\n// // track\n// export const trackEvent = async (eventName, eventObj = {}) => {\n//   if (isEmpty(analyticsToSend)) await updateAnalytics();\n//   const eventToSend = { ...eventObj, ...analyticsToSend };\n//   window.analytics.track(eventName, eventToSend);\n// };\n\n// // page\n// export const changePage = (page, params = {}) => {\n//   window.analytics.page(page, params);\n// };\n\n// export const updateAnalytics = async (params) => {\n//   try {\n//     const deviceLocale = window.navigator.languages;\n//     const browserLocale = window.navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n//     const { userAgent } = window.navigator;\n//     const {\n//       product,\n//       manufacturer,\n//       os: { family: deviceOs },\n//       os: { version: deviceOsVersion },\n//     } = platform;\n//     const { name: browser, version: browserVersion } = platform.parse(userAgent);\n//     let IPAddress;\n//     try {\n//       const res = await fetch(\"https://geolocation-db.com/json/\");\n//       const response = await res.json();\n//       IPAddress = response?.IPv4;\n//     } catch (e) {\n//       IPAddress = \"Not found\";\n//     }\n//     const analyticsPayload = {\n//       device_manufacturer: manufacturer,\n//       device_name: product,\n//       device_model: product,\n//       device_os: deviceOs,\n//       device_os_version: deviceOsVersion,\n//       device_locale: deviceLocale,\n//       device_language: window.navigator.languages,\n//       device_timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n//       device_dimensions_width: window.screen.width,\n//       device_dimensions_height: window.screen.height,\n//       viewport_width: window.innerWidth,\n//       viewport_height: window.innerHeight,\n//       ip_address: IPAddress,\n//       network_type: navigator?.connection?.effectiveType,\n//       browser_name: browser,\n//       browser_version: browserVersion,\n//       browser_locale: browserLocale,\n//       browser_user_agent: userAgent,\n//       params,\n//       sdk: params?.sdk ? params?.sdk : \"web\",\n//       os: deviceOs,\n//       user_id: params?.userId,\n//       app_name: params?.appName,\n//       creator_invite_id: sessionStorage.getItem(STORAGE_CREATOR_INVITE_ID),\n//     };\n//     analyticsToSend = analyticsPayload;\n//     return analyticsPayload;\n//   } catch (e) {\n//     console.log(e);\n//   }\n// };\n"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}