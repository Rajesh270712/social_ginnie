{"ast":null,"code":"import platform from \"platform\";\nimport { STORAGE_CREATOR_INVITE_ID } from \"../utils/constants\";\nimport { isEmpty } from \"../utils/helpers\";\nexport const MICROSITE_LANDING_PAGE_VIEW = \"MICROSITE_LANDING_PAGE_VIEW\";\nexport const MICROSITE_CONNECT_ACCOUNT_INITIATED = \"MICROSITE_CONNECT_ACCOUNT_INITIATED\";\nexport const MICROSITE_INSTRUCTIONS_SCREEN_VIEW = \"MICROSITE_INSTRUCTIONS_SCREEN_VIEW\";\nexport const MICROSITE_CONNECT_ACCOUNT_SUCCESS = \"MICROSITE_CONNECT_ACCOUNT_SUCCESS\";\nexport const MICROSITE_CONNECT_MORE_ACCOUNTS = \"MICROSITE_CONNECT_MORE_ACCOUNTS\";\nexport const MICROSITE_CONNECT_ACCOUNT_FAILED = \"MICROSITE_CONNECT_ACCOUNT_FAILED\";\nexport const MICROSITE_CONNECT_TRY_AGAIN = \"MICROSITE_CONNECT_TRY_AGAIN\";\nexport const MICROSITE_CONNECT_ANOTHER_ACCOUNT = \"MICROSITE_CONNECT_ANOTHER_ACCOUNT\";\nlet analyticsToSend;\n// identity\nexport const logUser = (userId, userObj) => {\n  window.analytics.identify(userId, userObj);\n};\n\n// track\nexport const trackEvent = async function (eventName) {\n  let eventObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (isEmpty(analyticsToSend)) await updateAnalytics();\n  const eventToSend = {\n    ...eventObj,\n    ...analyticsToSend\n  };\n  window.analytics.track(eventName, eventToSend);\n};\n\n// page\nexport const changePage = function (page) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  window.analytics.page(page, params);\n};\nexport const updateAnalytics = async params => {\n  try {\n    var _navigator, _navigator$connection;\n    const deviceLocale = window.navigator.languages;\n    const browserLocale = window.navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n    const {\n      userAgent\n    } = window.navigator;\n    const {\n      product,\n      manufacturer,\n      os: {\n        family: deviceOs\n      },\n      os: {\n        version: deviceOsVersion\n      }\n    } = platform;\n    const {\n      name: browser,\n      version: browserVersion\n    } = platform.parse(userAgent);\n    let IPAddress;\n    try {\n      const res = await fetch(\"https://geolocation-db.com/json/\");\n      const response = await res.json();\n      IPAddress = response === null || response === void 0 ? void 0 : response.IPv4;\n    } catch (e) {\n      IPAddress = \"Not found\";\n    }\n    const analyticsPayload = {\n      device_manufacturer: manufacturer,\n      device_name: product,\n      device_model: product,\n      device_os: deviceOs,\n      device_os_version: deviceOsVersion,\n      device_locale: deviceLocale,\n      device_language: window.navigator.languages,\n      device_timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      device_dimensions_width: window.screen.width,\n      device_dimensions_height: window.screen.height,\n      viewport_width: window.innerWidth,\n      viewport_height: window.innerHeight,\n      ip_address: IPAddress,\n      network_type: (_navigator = navigator) === null || _navigator === void 0 ? void 0 : (_navigator$connection = _navigator.connection) === null || _navigator$connection === void 0 ? void 0 : _navigator$connection.effectiveType,\n      browser_name: browser,\n      browser_version: browserVersion,\n      browser_locale: browserLocale,\n      browser_user_agent: userAgent,\n      params,\n      sdk: params !== null && params !== void 0 && params.sdk ? params === null || params === void 0 ? void 0 : params.sdk : \"web\",\n      os: deviceOs,\n      user_id: params === null || params === void 0 ? void 0 : params.userId,\n      app_name: params === null || params === void 0 ? void 0 : params.appName,\n      creator_invite_id: sessionStorage.getItem(STORAGE_CREATOR_INVITE_ID)\n    };\n    analyticsToSend = analyticsPayload;\n    return analyticsPayload;\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["platform","STORAGE_CREATOR_INVITE_ID","isEmpty","MICROSITE_LANDING_PAGE_VIEW","MICROSITE_CONNECT_ACCOUNT_INITIATED","MICROSITE_INSTRUCTIONS_SCREEN_VIEW","MICROSITE_CONNECT_ACCOUNT_SUCCESS","MICROSITE_CONNECT_MORE_ACCOUNTS","MICROSITE_CONNECT_ACCOUNT_FAILED","MICROSITE_CONNECT_TRY_AGAIN","MICROSITE_CONNECT_ANOTHER_ACCOUNT","analyticsToSend","logUser","userId","userObj","window","analytics","identify","trackEvent","eventName","eventObj","updateAnalytics","eventToSend","track","changePage","page","params","deviceLocale","navigator","languages","browserLocale","length","language","userAgent","product","manufacturer","os","family","deviceOs","version","deviceOsVersion","name","browser","browserVersion","parse","IPAddress","res","fetch","response","json","IPv4","e","analyticsPayload","device_manufacturer","device_name","device_model","device_os","device_os_version","device_locale","device_language","device_timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","device_dimensions_width","screen","width","device_dimensions_height","height","viewport_width","innerWidth","viewport_height","innerHeight","ip_address","network_type","connection","effectiveType","browser_name","browser_version","browser_locale","browser_user_agent","sdk","user_id","app_name","appName","creator_invite_id","sessionStorage","getItem","console","log"],"sources":["/Users/rajeshbagul/code/connect-account-creator/src/analytics/index.js"],"sourcesContent":["import platform from \"platform\";\nimport { STORAGE_CREATOR_INVITE_ID } from \"../utils/constants\";\nimport { isEmpty } from \"../utils/helpers\";\n\nexport const MICROSITE_LANDING_PAGE_VIEW = \"MICROSITE_LANDING_PAGE_VIEW\";\nexport const MICROSITE_CONNECT_ACCOUNT_INITIATED = \"MICROSITE_CONNECT_ACCOUNT_INITIATED\";\nexport const MICROSITE_INSTRUCTIONS_SCREEN_VIEW = \"MICROSITE_INSTRUCTIONS_SCREEN_VIEW\";\nexport const MICROSITE_CONNECT_ACCOUNT_SUCCESS = \"MICROSITE_CONNECT_ACCOUNT_SUCCESS\";\nexport const MICROSITE_CONNECT_MORE_ACCOUNTS = \"MICROSITE_CONNECT_MORE_ACCOUNTS\";\nexport const MICROSITE_CONNECT_ACCOUNT_FAILED = \"MICROSITE_CONNECT_ACCOUNT_FAILED\";\nexport const MICROSITE_CONNECT_TRY_AGAIN = \"MICROSITE_CONNECT_TRY_AGAIN\";\nexport const MICROSITE_CONNECT_ANOTHER_ACCOUNT = \"MICROSITE_CONNECT_ANOTHER_ACCOUNT\";\n\nlet analyticsToSend;\n// identity\nexport const logUser = (userId, userObj) => {\n  window.analytics.identify(userId, userObj);\n};\n\n// track\nexport const trackEvent = async (eventName, eventObj = {}) => {\n  if (isEmpty(analyticsToSend)) await updateAnalytics();\n  const eventToSend = { ...eventObj, ...analyticsToSend };\n  window.analytics.track(eventName, eventToSend);\n};\n\n// page\nexport const changePage = (page, params = {}) => {\n  window.analytics.page(page, params);\n};\n\nexport const updateAnalytics = async (params) => {\n  try {\n    const deviceLocale = window.navigator.languages;\n    const browserLocale = window.navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n    const { userAgent } = window.navigator;\n    const {\n      product,\n      manufacturer,\n      os: { family: deviceOs },\n      os: { version: deviceOsVersion },\n    } = platform;\n    const { name: browser, version: browserVersion } = platform.parse(userAgent);\n    let IPAddress;\n    try {\n      const res = await fetch(\"https://geolocation-db.com/json/\");\n      const response = await res.json();\n      IPAddress = response?.IPv4;\n    } catch (e) {\n      IPAddress = \"Not found\";\n    }\n    const analyticsPayload = {\n      device_manufacturer: manufacturer,\n      device_name: product,\n      device_model: product,\n      device_os: deviceOs,\n      device_os_version: deviceOsVersion,\n      device_locale: deviceLocale,\n      device_language: window.navigator.languages,\n      device_timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      device_dimensions_width: window.screen.width,\n      device_dimensions_height: window.screen.height,\n      viewport_width: window.innerWidth,\n      viewport_height: window.innerHeight,\n      ip_address: IPAddress,\n      network_type: navigator?.connection?.effectiveType,\n      browser_name: browser,\n      browser_version: browserVersion,\n      browser_locale: browserLocale,\n      browser_user_agent: userAgent,\n      params,\n      sdk: params?.sdk ? params?.sdk : \"web\",\n      os: deviceOs,\n      user_id: params?.userId,\n      app_name: params?.appName,\n      creator_invite_id: sessionStorage.getItem(STORAGE_CREATOR_INVITE_ID),\n    };\n    analyticsToSend = analyticsPayload;\n    return analyticsPayload;\n  } catch (e) {\n    console.log(e);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}