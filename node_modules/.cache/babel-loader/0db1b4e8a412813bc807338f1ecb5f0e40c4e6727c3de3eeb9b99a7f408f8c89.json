{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"startTimestamp\"];\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nfunction _startChild(transaction, _ref) {\n  var startTimestamp = _ref.startTimestamp,\n    ctx = _objectWithoutProperties(_ref, _excluded);\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n  return transaction.startChild(_objectSpread({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\nexport { _startChild, isMeasurementValue };","map":{"version":3,"mappings":";;;AAIA;AACA;AACA;AACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;EAAA;IAAAA;EACA;IACAC;EACA;EAEA;IACAC;EAAA,GACAF,KACA;AACA","names":["ctx","transaction","startTimestamp"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/browser/metrics/utils.ts"],"sourcesContent":["import type { Span, SpanContext } from '@sentry/types';\n\nimport type { Transaction } from '../../transaction';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}