{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-mysql package */\nclass Mysql {\n  constructor() {\n    Mysql.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Mysql';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Mysql.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Mysql Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    const pkg = loadModule('mysql/lib/Connection.js');\n    if (!pkg) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    }\n\n    // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n    fill(pkg, 'createQuery', function (orig) {\n      return function (options, values, callback) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = _optionalChain([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);\n        const span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n          description: typeof options === 'string' ? options : options.sql,\n          op: 'db'\n        })]);\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function (err, result, fields) {\n            _optionalChain([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);\n            callback(err, result, fields);\n          });\n        }\n        if (typeof values === 'function') {\n          return orig.call(this, options, function (err, result, fields) {\n            _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n            values(err, result, fields);\n          });\n        }\n        return orig.call(this, options, values, callback);\n      };\n    });\n  }\n}\nMysql.__initStatic();\nexport { Mysql };","map":{"version":3,"mappings":";;;;AAUA;AACA;EAAAA;IAAAC;EAAA;EACA;;;EAGA;IAAA;EAAA;;EAEA;;;EAGAC;IAAA;EAAA;;EAEA;;;EAGAC;IACA;MACA;MACA;IACA;IAEA;IAEA;MACA;MACA;IACA;;IAEA;IACA;IACA;IACA;IACAC;MACA;QACA;QACA;QACA;UACAC;UACAC;QACA;QAEA;UACA;YACAC;YACAC;UACA;QACA;QAEA;UACA;YACAD;YACAE;UACA;QACA;QAEA;MACA;IACA;EACA;AACA;AAAAR","names":["constructor","Mysql","__init","setupOnce","fill","description","op","_optionalChain","callback","values"],"sources":["/Users/rajeshbagul/code/connect-account-creator/node_modules/src/integrations/node/mysql.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { fill, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface MysqlConnection {\n  createQuery: () => void;\n}\n\n/** Tracing integration for node-mysql package */\nexport class Mysql implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mysql';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Mysql.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Mysql Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = loadModule<MysqlConnection>('mysql/lib/Connection.js');\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('Mysql Integration was unable to require `mysql` package.');\n      return;\n    }\n\n    // The original function will have one of these signatures:\n    //    function (callback) => void\n    //    function (options, callback) => void\n    //    function (options, values, callback) => void\n    fill(pkg, 'createQuery', function (orig: () => void) {\n      return function (this: unknown, options: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof options === 'string' ? options : (options as { sql: string }).sql,\n          op: 'db',\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, options, values, function (err: Error, result: unknown, fields: unknown) {\n            span?.finish();\n            callback(err, result, fields);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, options, function (err: Error, result: unknown, fields: unknown) {\n            span?.finish();\n            values(err, result, fields);\n          });\n        }\n\n        return orig.call(this, options, values, callback);\n      };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}