{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { WINDOW } from '@sentry/browser';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouter.tsx\";\n// We need to disable eslint no-explict-any because any is required for the\n// react-router typings.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nvar activeTransaction;\nfunction reactRouterV4Instrumentation(history, routes, matchPath) {\n  return createReactRouterInstrumentation(history, 'react-router-v4', routes, matchPath);\n}\nfunction reactRouterV5Instrumentation(history, routes, matchPath) {\n  return createReactRouterInstrumentation(history, 'react-router-v5', routes, matchPath);\n}\nfunction createReactRouterInstrumentation(history, name) {\n  var allRoutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var matchPath = arguments.length > 3 ? arguments[3] : undefined;\n  function getInitPathName() {\n    if (history && history.location) {\n      return history.location.pathname;\n    }\n    if (WINDOW && WINDOW.location) {\n      return WINDOW.location.pathname;\n    }\n    return undefined;\n  }\n\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n  function normalizeTransactionName(pathname) {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n    var branches = matchRoutes(allRoutes, pathname, matchPath);\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (var x = 0; x < branches.length; x++) {\n      if (branches[x].match.isExact) {\n        return [branches[x].match.path, 'route'];\n      }\n    }\n    return [pathname, 'url'];\n  }\n  var tags = {\n    'routing.instrumentation': name\n  };\n  return function (customStartTransaction) {\n    var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var initPathName = getInitPathName();\n    if (startTransactionOnPageLoad && initPathName) {\n      var _normalizeTransaction = normalizeTransactionName(initPathName),\n        _normalizeTransaction2 = _slicedToArray(_normalizeTransaction, 2),\n        _name = _normalizeTransaction2[0],\n        source = _normalizeTransaction2[1];\n      activeTransaction = customStartTransaction({\n        name: _name,\n        op: 'pageload',\n        tags: tags,\n        metadata: {\n          source: source\n        }\n      });\n    }\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen(function (location, action) {\n        if (action && (action === 'PUSH' || action === 'POP')) {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n          var _normalizeTransaction3 = normalizeTransactionName(location.pathname),\n            _normalizeTransaction4 = _slicedToArray(_normalizeTransaction3, 2),\n            _name2 = _normalizeTransaction4[0],\n            _source = _normalizeTransaction4[1];\n          activeTransaction = customStartTransaction({\n            name: _name2,\n            op: 'navigation',\n            tags: tags,\n            metadata: {\n              source: _source\n            }\n          });\n        }\n      });\n    }\n  };\n}\n\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\nfunction matchRoutes(routes, pathname, matchPath) {\n  var branch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  routes.some(function (route) {\n    var match = route.path ? matchPath(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({\n        route: route,\n        match: match\n      });\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n    return !!match;\n  });\n  return branch;\n}\nfunction computeRootMatch(pathname) {\n  return {\n    path: '/',\n    url: '/',\n    params: {},\n    isExact: pathname === '/'\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nfunction withSentryRouting(Route) {\n  var _this = this;\n  var componentDisplayName = Route.displayName || Route.name;\n  var WrappedRoute = function WrappedRoute(props) {\n    if (activeTransaction && props && props.computedMatch && props.computedMatch.isExact) {\n      activeTransaction.setName(props.computedMatch.path, 'route');\n    }\n\n    // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n    return React.createElement(Route, _objectSpread(_objectSpread({}, props), {}, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      }\n    }));\n  };\n  WrappedRoute.displayName = \"sentryRoute(\".concat(componentDisplayName, \")\");\n  hoistNonReactStatics(WrappedRoute, Route);\n  // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n  return WrappedRoute;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n\nexport { reactRouterV4Instrumentation, reactRouterV5Instrumentation, withSentryRouting };","map":{"version":3,"mappings":";;;;;AAAA;AAOA;AACA;AACA;;AAiBA;;AAEA;AAEA,sCACAA,SACAC,QACAC,WACA;EACA;AACA;AAEA,sCACAF,SACAC,QACAC,WACA;EACA;AACA;AAEA,0CACAF,SACAG,MAGA;EAAA,IAFAC;EAAA,IACAF;EAEA;IACA;MACA;IACA;IAEA;MACA;IACA;IAEA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA;IACA;MACA;IACA;IAEA;IACA;IACA;MACA;QACA;MACA;IACA;IAEA;EACA;EAEA;IACA;EACA;EAEA;IAAA;IAAA;IACA;IACA;MACA;QAAA;QAAAC;QAAAE;MACAC;QACAH;QACAI;QACAC;QACAC;UACAJ;QACA;MACA;IACA;IAEA;MACAL;QACA;UACA;YACAM;UACA;UAEA;YAAA;YAAAH;YAAAE;UACAC;YACAH;YACAI;YACAC;YACAC;cACAJ;YACA;UACA;QACA;MACA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBACAJ,QACAS,UACAR,WAEA;EAAA,IADAS;EAEAV;IACA,yBACAC,6BACAS,gBACAA;IAAA,EACAC;;IAEA;MACAD;QAAAE;QAAAC;MAAA;MAEA;QACAC;MACA;IACA;IAEA;EACA;EAEA;AACA;AAEA;EACA;IAAAC;IAAAC;IAAAC;IAAAC;EAAA;AACA;;AAEA;AACA;EAAA;EACA;EAEA;IACA;MACAb;IACA;;IAEA;IACA;IACA;IACA;MAAAc;MAAAC;QAAAC;QAAAC;MAAA;IAAA;EACA;EAEAC;EACAC;EACA;EACA;EACA;EACA;AACA;AACA","names":["history","routes","matchPath","name","allRoutes","source","activeTransaction","op","tags","metadata","pathname","branch","computeRootMatch","route","match","matchRoutes","path","url","params","isExact","__self","__source","fileName","lineNumber","WrappedRoute","hoistNonReactStatics"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/@sentry/src/reactrouter.tsx"],"sourcesContent":["import { WINDOW } from '@sentry/browser';\nimport type { Transaction, TransactionSource } from '@sentry/types';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nimport type { Action, Location, ReactRouterInstrumentation } from './types';\n\n// We need to disable eslint no-explict-any because any is required for the\n// react-router typings.\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype Match = { path: string; url: string; params: Record<string, any>; isExact: boolean };\n\nexport type RouterHistory = {\n  location?: Location;\n  listen?(cb: (location: Location, action: Action) => void): void;\n} & Record<string, any>;\n\nexport type RouteConfig = {\n  [propName: string]: any;\n  path?: string | string[];\n  exact?: boolean;\n  component?: JSX.Element;\n  routes?: RouteConfig[];\n};\n\ntype MatchPath = (pathname: string, props: string | string[] | any, parent?: Match | null) => Match | null;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nlet activeTransaction: Transaction | undefined;\n\nexport function reactRouterV4Instrumentation(\n  history: RouterHistory,\n  routes?: RouteConfig[],\n  matchPath?: MatchPath,\n): ReactRouterInstrumentation {\n  return createReactRouterInstrumentation(history, 'react-router-v4', routes, matchPath);\n}\n\nexport function reactRouterV5Instrumentation(\n  history: RouterHistory,\n  routes?: RouteConfig[],\n  matchPath?: MatchPath,\n): ReactRouterInstrumentation {\n  return createReactRouterInstrumentation(history, 'react-router-v5', routes, matchPath);\n}\n\nfunction createReactRouterInstrumentation(\n  history: RouterHistory,\n  name: string,\n  allRoutes: RouteConfig[] = [],\n  matchPath?: MatchPath,\n): ReactRouterInstrumentation {\n  function getInitPathName(): string | undefined {\n    if (history && history.location) {\n      return history.location.pathname;\n    }\n\n    if (WINDOW && WINDOW.location) {\n      return WINDOW.location.pathname;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n  function normalizeTransactionName(pathname: string): [string, TransactionSource] {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n\n    const branches = matchRoutes(allRoutes, pathname, matchPath);\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let x = 0; x < branches.length; x++) {\n      if (branches[x].match.isExact) {\n        return [branches[x].match.path, 'route'];\n      }\n    }\n\n    return [pathname, 'url'];\n  }\n\n  const tags = {\n    'routing.instrumentation': name,\n  };\n\n  return (customStartTransaction, startTransactionOnPageLoad = true, startTransactionOnLocationChange = true): void => {\n    const initPathName = getInitPathName();\n    if (startTransactionOnPageLoad && initPathName) {\n      const [name, source] = normalizeTransactionName(initPathName);\n      activeTransaction = customStartTransaction({\n        name,\n        op: 'pageload',\n        tags,\n        metadata: {\n          source,\n        },\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen((location, action) => {\n        if (action && (action === 'PUSH' || action === 'POP')) {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n\n          const [name, source] = normalizeTransactionName(location.pathname);\n          activeTransaction = customStartTransaction({\n            name,\n            op: 'navigation',\n            tags,\n            metadata: {\n              source,\n            },\n          });\n        }\n      });\n    }\n  };\n}\n\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\nfunction matchRoutes(\n  routes: RouteConfig[],\n  pathname: string,\n  matchPath: MatchPath,\n  branch: Array<{ route: RouteConfig; match: Match }> = [],\n): Array<{ route: RouteConfig; match: Match }> {\n  routes.some(route => {\n    const match = route.path\n      ? matchPath(pathname, route)\n      : branch.length\n      ? branch[branch.length - 1].match // use parent match\n      : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({ route, match });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n\n    return !!match;\n  });\n\n  return branch;\n}\n\nfunction computeRootMatch(pathname: string): Match {\n  return { path: '/', url: '/', params: {}, isExact: pathname === '/' };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nexport function withSentryRouting<P extends Record<string, any>, R extends React.ComponentType<P>>(Route: R): R {\n  const componentDisplayName = (Route as any).displayName || (Route as any).name;\n\n  const WrappedRoute: React.FC<P> = (props: P) => {\n    if (activeTransaction && props && props.computedMatch && props.computedMatch.isExact) {\n      activeTransaction.setName(props.computedMatch.path, 'route');\n    }\n\n    // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n    return <Route {...props} />;\n  };\n\n  WrappedRoute.displayName = `sentryRoute(${componentDisplayName})`;\n  hoistNonReactStatics(WrappedRoute, Route);\n  // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n  return WrappedRoute;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}