{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { withScope, captureException, showReportDialog } from '@sentry/browser';\nimport { isError, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/errorboundary.tsx\";\nfunction isAtLeastReact17(version) {\n  var major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\nvar UNKNOWN_COMPONENT = 'unknown';\nvar INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null\n};\n\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inherits(ErrorBoundary, _React$Component);\n  var _super = _createSuper(ErrorBoundary);\n  function ErrorBoundary() {\n    var _this;\n    _classCallCheck(this, ErrorBoundary);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    ErrorBoundary.prototype.__init.call(_assertThisInitialized(_this));\n    ErrorBoundary.prototype.__init2.call(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(ErrorBoundary, [{\n    key: \"__init\",\n    value: function __init() {\n      this.state = INITIAL_STATE;\n    }\n  }, {\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, _ref) {\n      var _this2 = this;\n      var componentStack = _ref.componentStack;\n      var _this$props = this.props,\n        beforeCapture = _this$props.beforeCapture,\n        onError = _this$props.onError,\n        showDialog = _this$props.showDialog,\n        dialogOptions = _this$props.dialogOptions;\n      withScope(function (scope) {\n        // If on React version >= 17, create stack trace from componentStack param and links\n        // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n        // Linking errors requires the `LinkedErrors` integration be enabled.\n        // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n        //\n        // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n        // with non-error objects. This is why we need to check if the error is an error-like object.\n        // See: https://github.com/getsentry/sentry-javascript/issues/6167\n        if (isAtLeastReact17(React.version) && isError(error)) {\n          var errorBoundaryError = new Error(error.message);\n          errorBoundaryError.name = \"React ErrorBoundary \".concat(errorBoundaryError.name);\n          errorBoundaryError.stack = componentStack;\n\n          // Using the `LinkedErrors` integration to link the errors together.\n          error.cause = errorBoundaryError;\n        }\n        if (beforeCapture) {\n          beforeCapture(scope, error, componentStack);\n        }\n        var eventId = captureException(error, {\n          contexts: {\n            react: {\n              componentStack: componentStack\n            }\n          }\n        });\n        if (onError) {\n          onError(error, componentStack, eventId);\n        }\n        if (showDialog) {\n          showReportDialog(_objectSpread(_objectSpread({}, dialogOptions), {}, {\n            eventId: eventId\n          }));\n        }\n\n        // componentDidCatch is used over getDerivedStateFromError\n        // so that componentStack is accessible through state.\n        _this2.setState({\n          error: error,\n          componentStack: componentStack,\n          eventId: eventId\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onMount = this.props.onMount;\n      if (onMount) {\n        onMount();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$state = this.state,\n        error = _this$state.error,\n        componentStack = _this$state.componentStack,\n        eventId = _this$state.eventId;\n      var onUnmount = this.props.onUnmount;\n      if (onUnmount) {\n        onUnmount(error, componentStack, eventId);\n      }\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      var _this3 = this;\n      this.resetErrorBoundary = function () {\n        var onReset = _this3.props.onReset;\n        var _this3$state = _this3.state,\n          error = _this3$state.error,\n          componentStack = _this3$state.componentStack,\n          eventId = _this3$state.eventId;\n        if (onReset) {\n          onReset(error, componentStack, eventId);\n        }\n        _this3.setState(INITIAL_STATE);\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        fallback = _this$props2.fallback,\n        children = _this$props2.children;\n      var state = this.state;\n      if (state.error) {\n        var element = undefined;\n        if (typeof fallback === 'function') {\n          element = fallback({\n            error: state.error,\n            componentStack: state.componentStack,\n            resetError: this.resetErrorBoundary,\n            eventId: state.eventId\n          });\n        } else {\n          element = fallback;\n        }\n        if (React.isValidElement(element)) {\n          return element;\n        }\n        if (fallback) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('fallback did not produce a valid ReactElement');\n        }\n\n        // Fail gracefully if no fallback provided or is not valid\n        return null;\n      }\n      if (typeof children === 'function') {\n        return children();\n      }\n      return children;\n    }\n  }]);\n  return ErrorBoundary;\n}(React.Component); // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(WrappedComponent, errorBoundaryOptions) {\n  var _this4 = this;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  var componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n  var Wrapped = function Wrapped(props) {\n    return React.createElement(ErrorBoundary, _objectSpread(_objectSpread({}, errorBoundaryOptions), {}, {\n      __self: _this4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      }\n    }), React.createElement(WrappedComponent, _objectSpread(_objectSpread({}, props), {}, {\n      __self: _this4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      }\n    })));\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  Wrapped.displayName = \"errorBoundary(\".concat(componentDisplayName, \")\");\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\nexport { ErrorBoundary, UNKNOWN_COMPONENT, isAtLeastReact17, withErrorBoundary };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AAMA;EACA;EACA;AACA;AAEA;AAmDA;EACAA;EACAC;EACAC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA,IAMAC;EAAA;EAAA;EAAA;IAAA;IAAA;IAAA;MAAAC;IAAA;IAAA;IAAAD;IAAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACA;MAAA;IAAA;EAAA;IAAA;IAAA,OAEA;MAAA;MAAA;MACA;QAAAE;QAAAC;QAAAC;QAAAC;MAEAC;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;UACA;UACAC;UACAA;;UAEA;UACAT;QACA;QAEA;UACAI;QACA;QACA;UAAAM;YAAAC;cAAAZ;YAAA;UAAA;QAAA;QACA;UACAM;QACA;QACA;UACAO;YAAAX;UAAA;QACA;;QAEA;QACA;QACA;UAAAD;UAAAD;UAAAE;QAAA;MACA;IACA;EAAA;IAAA;IAAA,OAEA;MACA;MACA;QACAY;MACA;IACA;EAAA;IAAA;IAAA,OAEA;MACA;QAAAb;QAAAD;QAAAE;MACA;MACA;QACAa;MACA;IACA;EAAA;IAAA;IAAA,OAEA;MAAA;MAAA;QACA;QACA;UAAAd;UAAAD;UAAAE;QACA;UACAc;QACA;QACA;MACA;IAAA;EAAA;IAAA;IAAA,OAEA;MACA;QAAAC;QAAAC;MACA;MAEA;QACA;QACA;UACAC;YACAlB;YACAD;YACAoB;YACAlB;UACA;QACA;UACAiB;QACA;QAEA;UACA;QACA;QAEA;UACA;QACA;;QAEA;QACA;MACA;MAEA;QACA;MACA;MACA;IACA;EAAA;EAAA;AAAA,EAlGAE,kBAqGA;AACA,2BACAC,kBACAC,sBACA;EAAA;EACA;EACA;EAEA;IAAA,OACAF;MAAAG;MAAAC;QAAAC;QAAAC;MAAA;IAAA,IACAN;MAAAG;MAAAC;QAAAC;QAAAC;MAAA;IAAA,IACA;EAAA,CACA;;EAEA;EACAC;;EAEA;EACA;EACAC;EACA;AACA","names":["componentStack","error","eventId","ErrorBoundary","args","beforeCapture","onError","showDialog","dialogOptions","withScope","errorBoundaryError","contexts","react","showReportDialog","onMount","onUnmount","onReset","fallback","children","element","resetError","React","WrappedComponent","errorBoundaryOptions","__self","__source","fileName","lineNumber","Wrapped","hoistNonReactStatics"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/@sentry/src/errorboundary.tsx"],"sourcesContent":["import type { ReportDialogOptions, Scope } from '@sentry/browser';\nimport { captureException, showReportDialog, withScope } from '@sentry/browser';\nimport { isError, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nexport function isAtLeastReact17(version: string): boolean {\n  const major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type FallbackRender = (errorData: {\n  error: Error;\n  componentStack: string;\n  eventId: string;\n  resetError(): void;\n}) => React.ReactElement;\n\nexport type ErrorBoundaryProps = {\n  children?: React.ReactNode | (() => React.ReactNode);\n  /** If a Sentry report dialog should be rendered on error */\n  showDialog?: boolean;\n  /**\n   * Options to be passed into the Sentry report dialog.\n   * No-op if {@link showDialog} is false.\n   */\n  dialogOptions?: ReportDialogOptions;\n  /**\n   * A fallback component that gets rendered when the error boundary encounters an error.\n   *\n   * Can either provide a React Component, or a function that returns React Component as\n   * a valid fallback prop. If a function is provided, the function will be called with\n   * the error, the component stack, and an function that resets the error boundary on error.\n   *\n   */\n  fallback?: React.ReactElement | FallbackRender;\n  /** Called when the error boundary encounters an error */\n  onError?(error: Error, componentStack: string, eventId: string): void;\n  /** Called on componentDidMount() */\n  onMount?(): void;\n  /** Called if resetError() is called from the fallback render props function  */\n  onReset?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called on componentWillUnmount() */\n  onUnmount?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called before the error is captured by Sentry, allows for you to add tags or context using the scope */\n  beforeCapture?(scope: Scope, error: Error | null, componentStack: string | null): void;\n};\n\ntype ErrorBoundaryState =\n  | {\n      componentStack: null;\n      error: null;\n      eventId: null;\n    }\n  | {\n      componentStack: React.ErrorInfo['componentStack'];\n      error: Error;\n      eventId: string;\n    };\n\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null,\n};\n\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  public state: ErrorBoundaryState = INITIAL_STATE;\n\n  public componentDidCatch(error: Error & { cause?: Error }, { componentStack }: React.ErrorInfo): void {\n    const { beforeCapture, onError, showDialog, dialogOptions } = this.props;\n\n    withScope(scope => {\n      // If on React version >= 17, create stack trace from componentStack param and links\n      // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n      // Linking errors requires the `LinkedErrors` integration be enabled.\n      // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n      //\n      // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n      // with non-error objects. This is why we need to check if the error is an error-like object.\n      // See: https://github.com/getsentry/sentry-javascript/issues/6167\n      if (isAtLeastReact17(React.version) && isError(error)) {\n        const errorBoundaryError = new Error(error.message);\n        errorBoundaryError.name = `React ErrorBoundary ${errorBoundaryError.name}`;\n        errorBoundaryError.stack = componentStack;\n\n        // Using the `LinkedErrors` integration to link the errors together.\n        error.cause = errorBoundaryError;\n      }\n\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n      const eventId = captureException(error, { contexts: { react: { componentStack } } });\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n      if (showDialog) {\n        showReportDialog({ ...dialogOptions, eventId });\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({ error, componentStack, eventId });\n    });\n  }\n\n  public componentDidMount(): void {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { error, componentStack, eventId } = this.state;\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  }\n\n  public resetErrorBoundary: () => void = () => {\n    const { onReset } = this.props;\n    const { error, componentStack, eventId } = this.state;\n    if (onReset) {\n      onReset(error, componentStack, eventId);\n    }\n    this.setState(INITIAL_STATE);\n  };\n\n  public render(): React.ReactNode {\n    const { fallback, children } = this.props;\n    const state = this.state;\n\n    if (state.error) {\n      let element: React.ReactElement | undefined = undefined;\n      if (typeof fallback === 'function') {\n        element = fallback({\n          error: state.error,\n          componentStack: state.componentStack,\n          resetError: this.resetErrorBoundary,\n          eventId: state.eventId,\n        });\n      } else {\n        element = fallback;\n      }\n\n      if (React.isValidElement(element)) {\n        return element;\n      }\n\n      if (fallback) {\n        __DEBUG_BUILD__ && logger.warn('fallback did not produce a valid ReactElement');\n      }\n\n      // Fail gracefully if no fallback provided or is not valid\n      return null;\n    }\n\n    if (typeof children === 'function') {\n      return (children as () => React.ReactNode)();\n    }\n    return children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  errorBoundaryOptions: ErrorBoundaryProps,\n): React.FC<P> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <ErrorBoundary {...errorBoundaryOptions}>\n      <WrappedComponent {...props} />\n    </ErrorBoundary>\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, withErrorBoundary };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}