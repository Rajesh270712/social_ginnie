{"ast":null,"code":"import _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-postgres package */\nvar Postgres = /*#__PURE__*/function () {\n  function Postgres() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Postgres);\n    Postgres.prototype.__init.call(this);\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Postgres, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Postgres.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = loadModule('pg');\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Postgres Integration was unable to require `pg` package.');\n        return;\n      }\n      if (this._usePgNative && !_optionalChain([pkg, 'access', function (_2) {\n        return _2.native;\n      }, 'optionalAccess', function (_3) {\n        return _3.Client;\n      }])) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n        return;\n      }\n      var _ref = this._usePgNative ? pkg.native : pkg,\n        Client = _ref.Client;\n\n      /**\n       * function (query, callback) => void\n       * function (query, params, callback) => void\n       * function (query) => Promise\n       * function (query, params) => Promise\n       * function (pg.Cursor) => pg.Cursor\n       */\n      fill(Client.prototype, 'query', function (orig) {\n        return function (config, values, callback) {\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_4) {\n            return _4.getSpan;\n          }, 'call', function (_5) {\n            return _5();\n          }]);\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_6) {\n            return _6.startChild;\n          }, 'call', function (_7) {\n            return _7({\n              description: typeof config === 'string' ? config : config.text,\n              op: 'db'\n            });\n          }]);\n          if (typeof callback === 'function') {\n            return orig.call(this, config, values, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n              callback(err, result);\n            });\n          }\n          if (typeof values === 'function') {\n            return orig.call(this, config, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_10) {\n                return _10.finish;\n              }, 'call', function (_11) {\n                return _11();\n              }]);\n              values(err, result);\n            });\n          }\n          var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n          if (isThenable(rv)) {\n            return rv.then(function (res) {\n              _optionalChain([span, 'optionalAccess', function (_12) {\n                return _12.finish;\n              }, 'call', function (_13) {\n                return _13();\n              }]);\n              return res;\n            });\n          }\n          _optionalChain([span, 'optionalAccess', function (_14) {\n            return _14.finish;\n          }, 'call', function (_15) {\n            return _15();\n          }]);\n          return rv;\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Postgres';\n    }\n  }]);\n  return Postgres;\n}();\nPostgres.__initStatic();\nexport { Postgres };","map":{"version":3,"mappings":";;;;;;AAgBA;AAAA,IACAA;EAaA;IAAA;IAAA;IAAAA;IACA;EACA;;EAEA;;;EAAA;IAAA;IAAA;IAXA;;;IAGA;MAAA;IAAA;EAAA;IAAA;IAAA,OAWA;MACA;QACA;QACA;MACA;MAEA;MAEA;QACA;QACA;MACA;MAEA;QAAA;MAAA;QAAA;MAAA;QACA;QACA;MACA;MAEA;QAAAC;;MAEA;;;;;;;MAOAC;QACA;UACA;UACA;YAAA;UAAA;YAAA;UAAA;UACA;YAAA;UAAA;YAAA;cACAC;cACAC;YACA;UAAA;UAEA;YACA;cACAC;gBAAA;cAAA;gBAAA;cAAA;cACAC;YACA;UACA;UAEA;YACA;cACAD;gBAAA;cAAA;gBAAA;cAAA;cACAE;YACA;UACA;UAEA;UAEA;YACA;cACAF;gBAAA;cAAA;gBAAA;cAAA;cACA;YACA;UACA;UAEAA;YAAA;UAAA;YAAA;UAAA;UACA;QACA;MACA;IACA;EAAA;IAAA;IAAA;IAlFA;;;IAGA;MAAA;IAAA;EAAA;EAAA;AAAA;AAgFAL","names":["Postgres","Client","fill","description","op","_optionalChain","callback","values"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/src/integrations/node/postgres.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface PgClient {\n  prototype: {\n    query: () => void | Promise<unknown>;\n  };\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n}\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Postgres.id;\n\n  private _usePgNative: boolean;\n\n  public constructor(options: PgOptions = {}) {\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = loadModule<{ Client: PgClient; native: { Client: PgClient } }>('pg');\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !pkg.native?.Client) {\n      __DEBUG_BUILD__ && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    const { Client } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, config: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.finish();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        span?.finish();\n        return rv;\n      };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}