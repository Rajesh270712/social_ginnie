{"ast":null,"code":"import _objectSpread from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rajeshbagul/code/ai-hackathon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uuid4, dateTimestampInSeconds, consoleSandbox, logger, GLOBAL_OBJ, isNodeEnv, getGlobalSingleton } from '@sentry/utils';\nimport { Scope } from './scope.js';\nimport { closeSession, makeSession, updateSession } from './session.js';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nvar API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nvar DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\n\n/**\n * @inheritDoc\n */\nvar Hub = /*#__PURE__*/function () {\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Scope();\n    var _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n    _classCallCheck(this, Hub);\n    this._version = _version;\n    Hub.prototype.__init.call(this);\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Hub, [{\n    key: \"__init\",\n    value: /** Is a {@link Layer}[] containing the client and scope */\n    function __init() {\n      this._stack = [{}];\n    }\n  }, {\n    key: \"isOlderThan\",\n    value: function isOlderThan(version) {\n      return this._version < version;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"bindClient\",\n    value: function bindClient(client) {\n      var top = this.getStackTop();\n      top.client = client;\n      if (client && client.setupIntegrations) {\n        client.setupIntegrations();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"pushScope\",\n    value: function pushScope() {\n      // We want to clone the content of prev scope\n      var scope = Scope.clone(this.getScope());\n      this.getStack().push({\n        client: this.getClient(),\n        scope: scope\n      });\n      return scope;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"popScope\",\n    value: function popScope() {\n      if (this.getStack().length <= 1) return false;\n      return !!this.getStack().pop();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"withScope\",\n    value: function withScope(callback) {\n      var scope = this.pushScope();\n      try {\n        callback(scope);\n      } finally {\n        this.popScope();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getClient\",\n    value: function getClient() {\n      return this.getStackTop().client;\n    }\n\n    /** Returns the scope of the top stack. */\n  }, {\n    key: \"getScope\",\n    value: function getScope() {\n      return this.getStackTop().scope;\n    }\n\n    /** Returns the scope stack for domains or the process. */\n  }, {\n    key: \"getStack\",\n    value: function getStack() {\n      return this._stack;\n    }\n\n    /** Returns the topmost scope layer in the order domain > local > process. */\n  }, {\n    key: \"getStackTop\",\n    value: function getStackTop() {\n      return this._stack[this._stack.length - 1];\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n      var syntheticException = new Error('Sentry syntheticException');\n      this._withClient(function (client, scope) {\n        client.captureException(exception, _objectSpread(_objectSpread({\n          originalException: exception,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message,\n    // eslint-disable-next-line deprecation/deprecation\n    level, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n      var syntheticException = new Error(message);\n      this._withClient(function (client, scope) {\n        client.captureMessage(message, level, _objectSpread(_objectSpread({\n          originalException: message,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint) {\n      var eventId = hint && hint.event_id ? hint.event_id : uuid4();\n      if (!event.type) {\n        this._lastEventId = eventId;\n      }\n      this._withClient(function (client, scope) {\n        client.captureEvent(event, _objectSpread(_objectSpread({}, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"lastEventId\",\n    value: function lastEventId() {\n      return this._lastEventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, hint) {\n      var _this$getStackTop = this.getStackTop(),\n        scope = _this$getStackTop.scope,\n        client = _this$getStackTop.client;\n      if (!scope || !client) return;\n      var _ref = client.getOptions && client.getOptions() || {},\n        _ref$beforeBreadcrumb = _ref.beforeBreadcrumb,\n        beforeBreadcrumb = _ref$beforeBreadcrumb === void 0 ? null : _ref$beforeBreadcrumb,\n        _ref$maxBreadcrumbs = _ref.maxBreadcrumbs,\n        maxBreadcrumbs = _ref$maxBreadcrumbs === void 0 ? DEFAULT_BREADCRUMBS : _ref$maxBreadcrumbs;\n      if (maxBreadcrumbs <= 0) return;\n      var timestamp = dateTimestampInSeconds();\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: timestamp\n      }, breadcrumb);\n      var finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(function () {\n        return beforeBreadcrumb(mergedBreadcrumb, hint);\n      }) : mergedBreadcrumb;\n      if (finalBreadcrumb === null) return;\n      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      var scope = this.getScope();\n      if (scope) scope.setUser(user);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      var scope = this.getScope();\n      if (scope) scope.setTags(tags);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      var scope = this.getScope();\n      if (scope) scope.setExtras(extras);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      var scope = this.getScope();\n      if (scope) scope.setTag(key, value);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      var scope = this.getScope();\n      if (scope) scope.setExtra(key, extra);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"setContext\",\n    value: function setContext(name, context) {\n      var scope = this.getScope();\n      if (scope) scope.setContext(name, context);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"configureScope\",\n    value: function configureScope(callback) {\n      var _this$getStackTop2 = this.getStackTop(),\n        scope = _this$getStackTop2.scope,\n        client = _this$getStackTop2.client;\n      if (scope && client) {\n        callback(scope);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"run\",\n    value: function run(callback) {\n      var oldHub = makeMain(this);\n      try {\n        callback(this);\n      } finally {\n        makeMain(oldHub);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      var client = this.getClient();\n      if (!client) return null;\n      try {\n        return client.getIntegration(integration);\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Hub\"));\n        return null;\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(context, customSamplingContext) {\n      return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"traceHeaders\",\n    value: function traceHeaders() {\n      return this._callExtensionMethod('traceHeaders');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureSession\",\n    value: function captureSession() {\n      var endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // both send the update and pull the session from the scope\n      if (endSession) {\n        return this.endSession();\n      }\n\n      // only send the update\n      this._sendSessionUpdate();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"endSession\",\n    value: function endSession() {\n      var layer = this.getStackTop();\n      var scope = layer && layer.scope;\n      var session = scope && scope.getSession();\n      if (session) {\n        closeSession(session);\n      }\n      this._sendSessionUpdate();\n\n      // the session is over; take it off of the scope\n      if (scope) {\n        scope.setSession();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"startSession\",\n    value: function startSession(context) {\n      var _this$getStackTop3 = this.getStackTop(),\n        scope = _this$getStackTop3.scope,\n        client = _this$getStackTop3.client;\n      var _ref2 = client && client.getOptions() || {},\n        release = _ref2.release,\n        environment = _ref2.environment;\n\n      // Will fetch userAgent if called from browser sdk\n      var _ref3 = GLOBAL_OBJ.navigator || {},\n        userAgent = _ref3.userAgent;\n      var session = makeSession(_objectSpread(_objectSpread(_objectSpread({\n        release: release,\n        environment: environment\n      }, scope && {\n        user: scope.getUser()\n      }), userAgent && {\n        userAgent: userAgent\n      }), context));\n      if (scope) {\n        // End existing session if there's one\n        var currentSession = scope.getSession && scope.getSession();\n        if (currentSession && currentSession.status === 'ok') {\n          updateSession(currentSession, {\n            status: 'exited'\n          });\n        }\n        this.endSession();\n\n        // Afterwards we set the new session on the scope\n        scope.setSession(session);\n      }\n      return session;\n    }\n\n    /**\n     * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n     * when Tracing is used.\n     */\n  }, {\n    key: \"shouldSendDefaultPii\",\n    value: function shouldSendDefaultPii() {\n      var client = this.getClient();\n      var options = client && client.getOptions();\n      return Boolean(options && options.sendDefaultPii);\n    }\n\n    /**\n     * Sends the current Session on the scope\n     */\n  }, {\n    key: \"_sendSessionUpdate\",\n    value: function _sendSessionUpdate() {\n      var _this$getStackTop4 = this.getStackTop(),\n        scope = _this$getStackTop4.scope,\n        client = _this$getStackTop4.client;\n      if (!scope) return;\n      var session = scope.getSession();\n      if (session) {\n        if (client && client.captureSession) {\n          client.captureSession(session);\n        }\n      }\n    }\n\n    /**\n     * Internal helper function to call a method on the top client if it exists.\n     *\n     * @param method The method to call on the client.\n     * @param args Arguments to pass to the client function.\n     */\n  }, {\n    key: \"_withClient\",\n    value: function _withClient(callback) {\n      var _this$getStackTop5 = this.getStackTop(),\n        scope = _this$getStackTop5.scope,\n        client = _this$getStackTop5.client;\n      if (client) {\n        callback(client, scope);\n      }\n    }\n\n    /**\n     * Calls global extension method and binding current instance to the function call\n     */\n    // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"_callExtensionMethod\",\n    value: function _callExtensionMethod(method) {\n      var carrier = getMainCarrier();\n      var sentry = carrier.__SENTRY__;\n      if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        return sentry.extensions[method].apply(this, args);\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Extension method \".concat(method, \" couldn't be found, doing nothing.\"));\n    }\n  }]);\n  return Hub;\n}();\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nfunction makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry) {\n  try {\n    var sentry = getMainCarrier().__SENTRY__;\n    var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      var registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nfunction getHubFromCarrier(carrier) {\n  return getGlobalSingleton('hub', function () {\n    return new Hub();\n  }, carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  __SENTRY__.hub = hub;\n  return true;\n}\nexport { API_VERSION, Hub, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, setHubOnCarrier };","map":{"version":3,"mappings":";;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AA6BA;AACA;AACA;AAFA,IAGAA;EAIA;;EAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;IAAA;IAAA;IAAA;IAAA;IAAAA;IACA;IACA;MACA;IACA;EACA;;EAEA;AACA;AACA;EAFA;IAAA;IAAA,OArBA;IACA;MAAA;IAAA;EAAA;IAAA;IAAA,OAuBA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACAC;MACA;QACAC;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;MACA;QACAA;QACAC;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;QACAC;MACA;QACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;IACA;;IAEA;EAAA;IAAA;IAAA,OACA;MACA;IACA;;IAEA;EAAA;IAAA;IAAA,OACA;MACA;IACA;;IAEA;EAAA;IAAA;IAAA,OACA;MACA;IACA;;IAEA;AACA;AACA;IACA;EAAA;IAAA;IAAA,OACA;MACA;MACA;MACA;QACAF,wBACAG;UAEAC;UACAC;QAAA,GACAC;UACAC;QAAA,IAEAN,MACA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA,wBACAO;IACA;IACAC,OACAH,MACA;MACA;MACA;MACA;QACAN,sBACAQ,SACAC;UAEAL;UACAC;QAAA,GACAC;UACAC;QAAA,IAEAN,MACA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;QACA;MACA;MAEA;QACAD;UAAAO;QAAA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;QAAAN;QAAAD;MAEA;MAEA,WACAA;QAAA,6BADAU;QAAAA;QAAA;QAAAC;MAGA;MAEA;MACA;QAAAC;MAAA;MACA,yCACAC;QAAA;MAAA,KACAC;MAEA;MAEAb;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;IACA;;IAEA;AACA;AACA;IACA;EAAA;IAAA;IAAA,OACA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;QAAAA;QAAAD;MACA;QACAE;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;QACAA;MACA;QACAa;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;MACA;QACA;MACA;QACA;QACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MAAA;MACA;MACA;QACA;MACA;;MAEA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;MACA;MACA;MACA;QACAC;MACA;MACA;;MAEA;MACA;QACAf;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;QAAAA;QAAAD;MACA;QAAAiB;QAAAC;;MAEA;MACA;QAAAC;MAEA;QACAF;QACAC;MAAA,GACAjB;QAAAmB;MAAA,IACAD;QAAAA;MAAA,IACAE,SACA;MAEA;QACA;QACA;QACA;UACAC;YAAAC;UAAA;QACA;QACA;;QAEA;QACAtB;MACA;MAEA;IACA;;IAEA;AACA;AACA;AACA;EAHA;IAAA;IAAA,OAIA;MACA;MACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA;MACA;QAAAA;QAAAD;MACA;MAEA;MACA;QACA;UACAA;QACA;MACA;IACA;;IAEA;AACA;AACA;AACA;AACA;AACA;EALA;IAAA;IAAA,OAMA;MACA;QAAAC;QAAAD;MACA;QACAE;MACA;IACA;;IAEA;AACA;AACA;IACA;IACA;EAAA;IAAA;IAAA,OACA;MACA;MACA;MACA;QAAA,kCAHAsB;UAAAA;QAAA;QAIA;MACA;MACA;IACA;EAAA;EAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAC;IACAC;IACAC;EACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;EACA;EACA;EACAC;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;EACA;;EAEA;EACA;IACAA;EACA;;EAEA;EACA;IACA;EACA;EACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;EACA;IACA;IACA;;IAEA;IACA;MACA;IACA;;IAEA;IACA;MACA;MACAA;IACA;;IAEA;IACA;EACA;IACA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;IAAA;EAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;EACA;EACAC;EACA;AACA","names":["Hub","top","client","scope","callback","exception","originalException","syntheticException","hint","event_id","message","level","beforeBreadcrumb","maxBreadcrumbs","timestamp","consoleSandbox","mergedBreadcrumb","makeMain","closeSession","release","environment","userAgent","user","context","updateSession","status","args","GLOBAL_OBJ","extensions","hub","setHubOnCarrier","__SENTRY__"],"sources":["/Users/rajeshbagul/code/ai-hackathon/node_modules/@sentry/src/hub.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  GLOBAL_OBJ,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, { status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope | undefined) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}